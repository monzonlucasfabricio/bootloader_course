
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004004  08004004  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800400c  0800400c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000008c4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000934  20000934  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a29  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000245c  00000000  00000000  00031ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c40  00000000  00000000  00033f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b38  00000000  00000000  00034b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000255fd  00000000  00000000  000356a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c23c  00000000  00000000  0005ac9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000db068  00000000  00000000  00066ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00141f41  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034d0  00000000  00000000  00141fbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ed0 	.word	0x08003ed0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003ed0 	.word	0x08003ed0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_CRC_Init+0x20>)
 80005a6:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <MX_CRC_Init+0x24>)
 80005a8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_CRC_Init+0x20>)
 80005ac:	f000 fedf 	bl	800136e <HAL_CRC_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005b6:	f000 fb21 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000a0 	.word	0x200000a0
 80005c4:	40023000 	.word	0x40023000

080005c8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <HAL_CRC_MspInit+0x3c>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d10d      	bne.n	80005f6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <HAL_CRC_MspInit+0x40>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a09      	ldr	r2, [pc, #36]	; (8000608 <HAL_CRC_MspInit+0x40>)
 80005e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <HAL_CRC_MspInit+0x40>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40023000 	.word	0x40023000
 8000608:	40023800 	.word	0x40023800

0800060c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_ETH_Init+0x84>)
 8000612:	4a20      	ldr	r2, [pc, #128]	; (8000694 <MX_ETH_Init+0x88>)
 8000614:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_ETH_Init+0x8c>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_ETH_Init+0x8c>)
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_ETH_Init+0x8c>)
 8000624:	22e1      	movs	r2, #225	; 0xe1
 8000626:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_ETH_Init+0x8c>)
 800062a:	2200      	movs	r2, #0
 800062c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_ETH_Init+0x8c>)
 8000630:	2200      	movs	r2, #0
 8000632:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_ETH_Init+0x8c>)
 8000636:	2200      	movs	r2, #0
 8000638:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_ETH_Init+0x84>)
 800063c:	4a16      	ldr	r2, [pc, #88]	; (8000698 <MX_ETH_Init+0x8c>)
 800063e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_ETH_Init+0x84>)
 8000642:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000646:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_ETH_Init+0x84>)
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <MX_ETH_Init+0x90>)
 800064c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_ETH_Init+0x84>)
 8000650:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <MX_ETH_Init+0x94>)
 8000652:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_ETH_Init+0x84>)
 8000656:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800065a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <MX_ETH_Init+0x84>)
 800065e:	f000 fea3 	bl	80013a8 <HAL_ETH_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000668:	f000 fac8 	bl	8000bfc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800066c:	2238      	movs	r2, #56	; 0x38
 800066e:	2100      	movs	r1, #0
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <MX_ETH_Init+0x98>)
 8000672:	f003 f81f 	bl	80036b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_ETH_Init+0x98>)
 8000678:	2221      	movs	r2, #33	; 0x21
 800067a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_ETH_Init+0x98>)
 800067e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000682:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_ETH_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200001e8 	.word	0x200001e8
 8000694:	40028000 	.word	0x40028000
 8000698:	2000008c 	.word	0x2000008c
 800069c:	200000a8 	.word	0x200000a8
 80006a0:	20000148 	.word	0x20000148
 80006a4:	20000298 	.word	0x20000298

080006a8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08e      	sub	sp, #56	; 0x38
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a55      	ldr	r2, [pc, #340]	; (800081c <HAL_ETH_MspInit+0x174>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	f040 80a4 	bne.w	8000814 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	4b53      	ldr	r3, [pc, #332]	; (8000820 <HAL_ETH_MspInit+0x178>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	4a52      	ldr	r2, [pc, #328]	; (8000820 <HAL_ETH_MspInit+0x178>)
 80006d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006da:	6313      	str	r3, [r2, #48]	; 0x30
 80006dc:	4b50      	ldr	r3, [pc, #320]	; (8000820 <HAL_ETH_MspInit+0x178>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006e4:	623b      	str	r3, [r7, #32]
 80006e6:	6a3b      	ldr	r3, [r7, #32]
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
 80006ec:	4b4c      	ldr	r3, [pc, #304]	; (8000820 <HAL_ETH_MspInit+0x178>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	4a4b      	ldr	r2, [pc, #300]	; (8000820 <HAL_ETH_MspInit+0x178>)
 80006f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006f6:	6313      	str	r3, [r2, #48]	; 0x30
 80006f8:	4b49      	ldr	r3, [pc, #292]	; (8000820 <HAL_ETH_MspInit+0x178>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000700:	61fb      	str	r3, [r7, #28]
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
 8000708:	4b45      	ldr	r3, [pc, #276]	; (8000820 <HAL_ETH_MspInit+0x178>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070c:	4a44      	ldr	r2, [pc, #272]	; (8000820 <HAL_ETH_MspInit+0x178>)
 800070e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000712:	6313      	str	r3, [r2, #48]	; 0x30
 8000714:	4b42      	ldr	r3, [pc, #264]	; (8000820 <HAL_ETH_MspInit+0x178>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	4b3e      	ldr	r3, [pc, #248]	; (8000820 <HAL_ETH_MspInit+0x178>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a3d      	ldr	r2, [pc, #244]	; (8000820 <HAL_ETH_MspInit+0x178>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
 8000730:	4b3b      	ldr	r3, [pc, #236]	; (8000820 <HAL_ETH_MspInit+0x178>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	4b37      	ldr	r3, [pc, #220]	; (8000820 <HAL_ETH_MspInit+0x178>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	4a36      	ldr	r2, [pc, #216]	; (8000820 <HAL_ETH_MspInit+0x178>)
 8000746:	f043 0301 	orr.w	r3, r3, #1
 800074a:	6313      	str	r3, [r2, #48]	; 0x30
 800074c:	4b34      	ldr	r3, [pc, #208]	; (8000820 <HAL_ETH_MspInit+0x178>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	4b30      	ldr	r3, [pc, #192]	; (8000820 <HAL_ETH_MspInit+0x178>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <HAL_ETH_MspInit+0x178>)
 8000762:	f043 0302 	orr.w	r3, r3, #2
 8000766:	6313      	str	r3, [r2, #48]	; 0x30
 8000768:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <HAL_ETH_MspInit+0x178>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <HAL_ETH_MspInit+0x178>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	4a28      	ldr	r2, [pc, #160]	; (8000820 <HAL_ETH_MspInit+0x178>)
 800077e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000782:	6313      	str	r3, [r2, #48]	; 0x30
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <HAL_ETH_MspInit+0x178>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000790:	2332      	movs	r3, #50	; 0x32
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	481e      	ldr	r0, [pc, #120]	; (8000824 <HAL_ETH_MspInit+0x17c>)
 80007ac:	f001 f928 	bl	8001a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007b0:	2386      	movs	r3, #134	; 0x86
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c0:	230b      	movs	r3, #11
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	4619      	mov	r1, r3
 80007ca:	4817      	ldr	r0, [pc, #92]	; (8000828 <HAL_ETH_MspInit+0x180>)
 80007cc:	f001 f918 	bl	8001a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e2:	230b      	movs	r3, #11
 80007e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	4619      	mov	r1, r3
 80007ec:	480f      	ldr	r0, [pc, #60]	; (800082c <HAL_ETH_MspInit+0x184>)
 80007ee:	f001 f907 	bl	8001a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000804:	230b      	movs	r3, #11
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080c:	4619      	mov	r1, r3
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000810:	f001 f8f6 	bl	8001a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000814:	bf00      	nop
 8000816:	3738      	adds	r7, #56	; 0x38
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40028000 	.word	0x40028000
 8000820:	40023800 	.word	0x40023800
 8000824:	40020800 	.word	0x40020800
 8000828:	40020000 	.word	0x40020000
 800082c:	40020400 	.word	0x40020400
 8000830:	40021800 	.word	0x40021800

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	4b4c      	ldr	r3, [pc, #304]	; (8000980 <MX_GPIO_Init+0x14c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a4b      	ldr	r2, [pc, #300]	; (8000980 <MX_GPIO_Init+0x14c>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b49      	ldr	r3, [pc, #292]	; (8000980 <MX_GPIO_Init+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	4b45      	ldr	r3, [pc, #276]	; (8000980 <MX_GPIO_Init+0x14c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a44      	ldr	r2, [pc, #272]	; (8000980 <MX_GPIO_Init+0x14c>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b42      	ldr	r3, [pc, #264]	; (8000980 <MX_GPIO_Init+0x14c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b3e      	ldr	r3, [pc, #248]	; (8000980 <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a3d      	ldr	r2, [pc, #244]	; (8000980 <MX_GPIO_Init+0x14c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b3b      	ldr	r3, [pc, #236]	; (8000980 <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b37      	ldr	r3, [pc, #220]	; (8000980 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a36      	ldr	r2, [pc, #216]	; (8000980 <MX_GPIO_Init+0x14c>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b34      	ldr	r3, [pc, #208]	; (8000980 <MX_GPIO_Init+0x14c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b30      	ldr	r3, [pc, #192]	; (8000980 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a2f      	ldr	r2, [pc, #188]	; (8000980 <MX_GPIO_Init+0x14c>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <MX_GPIO_Init+0x14c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <MX_GPIO_Init+0x14c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a28      	ldr	r2, [pc, #160]	; (8000980 <MX_GPIO_Init+0x14c>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_GPIO_Init+0x14c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008f8:	4822      	ldr	r0, [pc, #136]	; (8000984 <MX_GPIO_Init+0x150>)
 80008fa:	f001 fa43 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	4821      	ldr	r0, [pc, #132]	; (8000988 <MX_GPIO_Init+0x154>)
 8000904:	f001 fa3e 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	481b      	ldr	r0, [pc, #108]	; (800098c <MX_GPIO_Init+0x158>)
 8000920:	f001 f86e 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000924:	f244 0381 	movw	r3, #16513	; 0x4081
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4811      	ldr	r0, [pc, #68]	; (8000984 <MX_GPIO_Init+0x150>)
 800093e:	f001 f85f 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <MX_GPIO_Init+0x154>)
 800095a:	f001 f851 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_GPIO_Init+0x154>)
 8000972:	f001 f845 	bl	8001a00 <HAL_GPIO_Init>

}
 8000976:	bf00      	nop
 8000978:	3730      	adds	r7, #48	; 0x30
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40020400 	.word	0x40020400
 8000988:	40021800 	.word	0x40021800
 800098c:	40020800 	.word	0x40020800

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f000 fb72 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f82e 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f7ff ff4a 	bl	8000834 <MX_GPIO_Init>
  MX_ETH_Init();
 80009a0:	f7ff fe34 	bl	800060c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009a4:	f000 f9f2 	bl	8000d8c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009a8:	f000 fab6 	bl	8000f18 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 80009ac:	f7ff fdf8 	bl	80005a0 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80009b0:	f000 f9c2 	bl	8000d38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  print_debug_msg("Hello from Bootloader \r\n");
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <main+0x58>)
 80009b6:	f000 f889 	bl	8000acc <print_debug_msg>
  if ( HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin) == GPIO_PIN_SET)
 80009ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <main+0x5c>)
 80009c0:	f001 f9c8 	bl	8001d54 <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d105      	bne.n	80009d6 <main+0x46>
  {
	  print_debug_msg("User button is pressed -> Jumping to BL mode\r\n");
 80009ca:	4809      	ldr	r0, [pc, #36]	; (80009f0 <main+0x60>)
 80009cc:	f000 f87e 	bl	8000acc <print_debug_msg>
	  BL_uart_read_data();
 80009d0:	f000 f8a2 	bl	8000b18 <BL_uart_read_data>
 80009d4:	e004      	b.n	80009e0 <main+0x50>
  }
  else{

	  print_debug_msg("User button is not pressed -> Jumping to App\r\n");
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <main+0x64>)
 80009d8:	f000 f878 	bl	8000acc <print_debug_msg>
	  BL_jump_to_app();
 80009dc:	f000 f8ce 	bl	8000b7c <BL_jump_to_app>
 80009e0:	2300      	movs	r3, #0
  }
  /* USER CODE END 2 */
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	08003ee8 	.word	0x08003ee8
 80009ec:	40020800 	.word	0x40020800
 80009f0:	08003f04 	.word	0x08003f04
 80009f4:	08003f34 	.word	0x08003f34

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b094      	sub	sp, #80	; 0x50
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	2230      	movs	r2, #48	; 0x30
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fe54 	bl	80036b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <SystemClock_Config+0xcc>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <SystemClock_Config+0xcc>)
 8000a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2c:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <SystemClock_Config+0xcc>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <SystemClock_Config+0xd0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a44:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <SystemClock_Config+0xd0>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <SystemClock_Config+0xd0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a62:	2302      	movs	r3, #2
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a70:	2348      	movs	r3, #72	; 0x48
 8000a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	f107 0320 	add.w	r3, r7, #32
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fab5 	bl	8001ff0 <HAL_RCC_OscConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a8c:	f000 f8b6 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a90:	230f      	movs	r3, #15
 8000a92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a94:	2302      	movs	r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fd17 	bl	80024e0 <HAL_RCC_ClockConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ab8:	f000 f8a0 	bl	8000bfc <Error_Handler>
  }
}
 8000abc:	bf00      	nop
 8000abe:	3750      	adds	r7, #80	; 0x50
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40007000 	.word	0x40007000

08000acc <print_debug_msg>:

/* USER CODE BEGIN 4 */

/* Print formatted string to console over uart */
void print_debug_msg(char *format,...){
 8000acc:	b40f      	push	{r0, r1, r2, r3}
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b096      	sub	sp, #88	; 0x58
 8000ad2:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/* Extract the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000ad4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ad8:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fe04 	bl	80036f0 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb7f 	bl	80001f0 <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	f107 0108 	add.w	r1, r7, #8
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <print_debug_msg+0x48>)
 8000b00:	f001 ff2d 	bl	800295e <HAL_UART_Transmit>
#endif
}
 8000b04:	bf00      	nop
 8000b06:	3758      	adds	r7, #88	; 0x58
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b0e:	b004      	add	sp, #16
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200003dc 	.word	0x200003dc

08000b18 <BL_uart_read_data>:
 *	---------------------
 *	| Command code     	|
 *	---------------------
 *	| CRC				|
 */
void BL_uart_read_data(void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		// Set the buffer in 0
		memset(bl_rx_buffer,0,200);
 8000b22:	22c8      	movs	r2, #200	; 0xc8
 8000b24:	2100      	movs	r1, #0
 8000b26:	4812      	ldr	r0, [pc, #72]	; (8000b70 <BL_uart_read_data+0x58>)
 8000b28:	f002 fdc4 	bl	80036b4 <memset>

		// Read Length to follow
		HAL_UART_Receive(C_UART, bl_rx_buffer, 1, HAL_MAX_DELAY);
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	2201      	movs	r2, #1
 8000b32:	490f      	ldr	r1, [pc, #60]	; (8000b70 <BL_uart_read_data+0x58>)
 8000b34:	480f      	ldr	r0, [pc, #60]	; (8000b74 <BL_uart_read_data+0x5c>)
 8000b36:	f001 ffa4 	bl	8002a82 <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <BL_uart_read_data+0x58>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]

		// Read the command code
		HAL_UART_Receive(C_UART, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	490b      	ldr	r1, [pc, #44]	; (8000b78 <BL_uart_read_data+0x60>)
 8000b4a:	480a      	ldr	r0, [pc, #40]	; (8000b74 <BL_uart_read_data+0x5c>)
 8000b4c:	f001 ff99 	bl	8002a82 <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <BL_uart_read_data+0x58>)
 8000b52:	785b      	ldrb	r3, [r3, #1]
 8000b54:	2b51      	cmp	r3, #81	; 0x51
 8000b56:	d002      	beq.n	8000b5e <BL_uart_read_data+0x46>
 8000b58:	2b52      	cmp	r3, #82	; 0x52
 8000b5a:	d004      	beq.n	8000b66 <BL_uart_read_data+0x4e>
 8000b5c:	e007      	b.n	8000b6e <BL_uart_read_data+0x56>
		{
			case BL_GET_VER:
				BL_handle_getver_cmd(bl_rx_buffer);
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <BL_uart_read_data+0x58>)
 8000b60:	f000 f838 	bl	8000bd4 <BL_handle_getver_cmd>
				break;
 8000b64:	e003      	b.n	8000b6e <BL_uart_read_data+0x56>
			case BL_GET_HELP:
				BL_handle_gethelp_cmd(bl_rx_buffer);
 8000b66:	4802      	ldr	r0, [pc, #8]	; (8000b70 <BL_uart_read_data+0x58>)
 8000b68:	f000 f83e 	bl	8000be8 <BL_handle_gethelp_cmd>
				break;
 8000b6c:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 8000b6e:	e7d8      	b.n	8000b22 <BL_uart_read_data+0xa>
 8000b70:	200002d0 	.word	0x200002d0
 8000b74:	20000398 	.word	0x20000398
 8000b78:	200002d1 	.word	0x200002d1

08000b7c <BL_jump_to_app>:
	}
}


void BL_jump_to_app(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
	/* Function to hold the address of reset handler of the user app */
	void (*app_reset_handler)(void);

	print_debug_msg("Bootloader -> Jump to user app\r\n");
 8000b82:	480f      	ldr	r0, [pc, #60]	; (8000bc0 <BL_jump_to_app+0x44>)
 8000b84:	f7ff ffa2 	bl	8000acc <print_debug_msg>

	/* Main Stack Pointer */
	uint32_t msp_value = *(volatile uint32_t *)FLASH_APP_BASE_ADDRESS;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <BL_jump_to_app+0x48>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]

	print_debug_msg("MSP Value -> %#x\n", msp_value);
 8000b8e:	68f9      	ldr	r1, [r7, #12]
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <BL_jump_to_app+0x4c>)
 8000b92:	f7ff ff9b 	bl	8000acc <print_debug_msg>
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	f383 8808 	msr	MSP, r3

	__set_MSP(msp_value);

	/* Reset handler will be the base address + 4 */
	uint32_t reset_handler_address = *(volatile uint32_t *) (FLASH_APP_BASE_ADDRESS + 4);
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <BL_jump_to_app+0x50>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void*)reset_handler_address;
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	607b      	str	r3, [r7, #4]

	print_debug_msg("Reset handler value -> %#x\n",reset_handler_address);
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <BL_jump_to_app+0x54>)
 8000bae:	f7ff ff8d 	bl	8000acc <print_debug_msg>

	/* Jumping to user application*/
	app_reset_handler();
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4798      	blx	r3


}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	08003f64 	.word	0x08003f64
 8000bc4:	08008000 	.word	0x08008000
 8000bc8:	08003f88 	.word	0x08003f88
 8000bcc:	08008004 	.word	0x08008004
 8000bd0:	08003f9c 	.word	0x08003f9c

08000bd4 <BL_handle_getver_cmd>:

void BL_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <BL_handle_gethelp_cmd>:

void BL_handle_gethelp_cmd(uint8_t *bl_rx_buffer)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <Error_Handler+0x6>

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca0:	f000 fa3e 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f002 fcc2 	bl	8003660 <__errno>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	230c      	movs	r3, #12
 8000ce0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20030000 	.word	0x20030000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	20000094 	.word	0x20000094
 8000d10:	20000938 	.word	0x20000938

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <MX_USART2_UART_Init+0x50>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d70:	f001 fda8 	bl	80028c4 <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d7a:	f7ff ff3f 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200003dc 	.word	0x200003dc
 8000d88:	40004400 	.word	0x40004400

08000d8c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART3_UART_Init+0x4c>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_USART3_UART_Init+0x50>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_USART3_UART_Init+0x4c>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART3_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART3_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART3_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART3_UART_Init+0x4c>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART3_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART3_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART3_UART_Init+0x4c>)
 8000dc4:	f001 fd7e 	bl	80028c4 <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dce:	f7ff ff15 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000398 	.word	0x20000398
 8000ddc:	40004800 	.word	0x40004800

08000de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	; 0x30
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a41      	ldr	r2, [pc, #260]	; (8000f04 <HAL_UART_MspInit+0x124>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d14a      	bne.n	8000e98 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	4b40      	ldr	r3, [pc, #256]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a3f      	ldr	r2, [pc, #252]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b3d      	ldr	r3, [pc, #244]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	4b39      	ldr	r3, [pc, #228]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a38      	ldr	r2, [pc, #224]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a31      	ldr	r2, [pc, #196]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e56:	2308      	movs	r3, #8
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e66:	2307      	movs	r3, #7
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4826      	ldr	r0, [pc, #152]	; (8000f0c <HAL_UART_MspInit+0x12c>)
 8000e72:	f000 fdc5 	bl	8001a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e76:	2320      	movs	r3, #32
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e86:	2307      	movs	r3, #7
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481f      	ldr	r0, [pc, #124]	; (8000f10 <HAL_UART_MspInit+0x130>)
 8000e92:	f000 fdb5 	bl	8001a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e96:	e031      	b.n	8000efc <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART3)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <HAL_UART_MspInit+0x134>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d12c      	bne.n	8000efc <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_UART_MspInit+0x128>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eec:	2307      	movs	r3, #7
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <HAL_UART_MspInit+0x130>)
 8000ef8:	f000 fd82 	bl	8001a00 <HAL_GPIO_Init>
}
 8000efc:	bf00      	nop
 8000efe:	3730      	adds	r7, #48	; 0x30
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40004400 	.word	0x40004400
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40020c00 	.word	0x40020c00
 8000f14:	40004800 	.word	0x40004800

08000f18 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f26:	2204      	movs	r2, #4
 8000f28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5c:	f000 ff2b 	bl	8001db6 <HAL_PCD_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f66:	f7ff fe49 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000420 	.word	0x20000420

08000f74 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f94:	d13f      	bne.n	8001016 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_PCD_MspInit+0xac>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a20      	ldr	r2, [pc, #128]	; (8001020 <HAL_PCD_MspInit+0xac>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_PCD_MspInit+0xac>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fb2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4815      	ldr	r0, [pc, #84]	; (8001024 <HAL_PCD_MspInit+0xb0>)
 8000fd0:	f000 fd16 	bl	8001a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480e      	ldr	r0, [pc, #56]	; (8001024 <HAL_PCD_MspInit+0xb0>)
 8000fea:	f000 fd09 	bl	8001a00 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_PCD_MspInit+0xac>)
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <HAL_PCD_MspInit+0xac>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff8:	6353      	str	r3, [r2, #52]	; 0x34
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_PCD_MspInit+0xac>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_PCD_MspInit+0xac>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_PCD_MspInit+0xac>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102e:	490e      	ldr	r1, [pc, #56]	; (8001068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001044:	4c0b      	ldr	r4, [pc, #44]	; (8001074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001052:	f7ff fe5f 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f002 fb09 	bl	800366c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fc99 	bl	8000990 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001060:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800106c:	08004014 	.word	0x08004014
  ldr r2, =_sbss
 8001070:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001074:	20000934 	.word	0x20000934

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f92f 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fda8 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f939 	bl	8001356 <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f90f 	bl	800131e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000000 	.word	0x20000000
 8001118:	20000008 	.word	0x20000008
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	2000092c 	.word	0x2000092c

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000092c 	.word	0x2000092c

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_Delay+0x40>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000008 	.word	0x20000008

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff8e 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff47 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff5c 	bl	80011ec <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff8e 	bl	800125c <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5d 	bl	8001208 <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffb0 	bl	80012c4 <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e00e      	b.n	800139e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	795b      	ldrb	r3, [r3, #5]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d105      	bne.n	8001396 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff f919 	bl	80005c8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e06c      	b.n	8001494 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d106      	bne.n	80013d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2223      	movs	r2, #35	; 0x23
 80013c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff f96b 	bl	80006a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b31      	ldr	r3, [pc, #196]	; (800149c <HAL_ETH_Init+0xf4>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a30      	ldr	r2, [pc, #192]	; (800149c <HAL_ETH_Init+0xf4>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_ETH_Init+0xf4>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <HAL_ETH_Init+0xf8>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <HAL_ETH_Init+0xf8>)
 80013f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_ETH_Init+0xf8>)
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4927      	ldr	r1, [pc, #156]	; (80014a0 <HAL_ETH_Init+0xf8>)
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <HAL_ETH_Init+0xf8>)
 800140a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001422:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001424:	f7ff fe90 	bl	8001148 <HAL_GetTick>
 8001428:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800142a:	e011      	b.n	8001450 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800142c:	f7ff fe8c 	bl	8001148 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800143a:	d909      	bls.n	8001450 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2204      	movs	r2, #4
 8001440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	22e0      	movs	r2, #224	; 0xe0
 8001448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e021      	b.n	8001494 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1e4      	bne.n	800142c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f95a 	bl	800171c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fa01 	bl	8001870 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fa58 	bl	8001924 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	461a      	mov	r2, r3
 800147a:	2100      	movs	r1, #0
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f9bf 	bl	8001800 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2210      	movs	r2, #16
 800148e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	40013800 	.word	0x40013800

080014a4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4b51      	ldr	r3, [pc, #324]	; (8001600 <ETH_SetMACConfig+0x15c>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	7c1b      	ldrb	r3, [r3, #16]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <ETH_SetMACConfig+0x28>
 80014c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014ca:	e000      	b.n	80014ce <ETH_SetMACConfig+0x2a>
 80014cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	7c5b      	ldrb	r3, [r3, #17]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <ETH_SetMACConfig+0x38>
 80014d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014da:	e000      	b.n	80014de <ETH_SetMACConfig+0x3a>
 80014dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	7fdb      	ldrb	r3, [r3, #31]
 80014ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	7f92      	ldrb	r2, [r2, #30]
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	d102      	bne.n	8001502 <ETH_SetMACConfig+0x5e>
 80014fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001500:	e000      	b.n	8001504 <ETH_SetMACConfig+0x60>
 8001502:	2200      	movs	r2, #0
                        macconf->Speed |
 8001504:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	7f1b      	ldrb	r3, [r3, #28]
 800150a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800150c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001512:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	791b      	ldrb	r3, [r3, #4]
 8001518:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800151a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001522:	2a00      	cmp	r2, #0
 8001524:	d102      	bne.n	800152c <ETH_SetMACConfig+0x88>
 8001526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152a:	e000      	b.n	800152e <ETH_SetMACConfig+0x8a>
 800152c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800152e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	7bdb      	ldrb	r3, [r3, #15]
 8001534:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001536:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800153c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001544:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001546:	4313      	orrs	r3, r2
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800155e:	2001      	movs	r0, #1
 8001560:	f7ff fdfe 	bl	8001160 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	f64f 7341 	movw	r3, #65345	; 0xff41
 800157a:	4013      	ands	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001582:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800158a:	2a00      	cmp	r2, #0
 800158c:	d101      	bne.n	8001592 <ETH_SetMACConfig+0xee>
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	e000      	b.n	8001594 <ETH_SetMACConfig+0xf0>
 8001592:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001594:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800159a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80015a2:	2a01      	cmp	r2, #1
 80015a4:	d101      	bne.n	80015aa <ETH_SetMACConfig+0x106>
 80015a6:	2208      	movs	r2, #8
 80015a8:	e000      	b.n	80015ac <ETH_SetMACConfig+0x108>
 80015aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80015b4:	2a01      	cmp	r2, #1
 80015b6:	d101      	bne.n	80015bc <ETH_SetMACConfig+0x118>
 80015b8:	2204      	movs	r2, #4
 80015ba:	e000      	b.n	80015be <ETH_SetMACConfig+0x11a>
 80015bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80015c6:	2a01      	cmp	r2, #1
 80015c8:	d101      	bne.n	80015ce <ETH_SetMACConfig+0x12a>
 80015ca:	2202      	movs	r2, #2
 80015cc:	e000      	b.n	80015d0 <ETH_SetMACConfig+0x12c>
 80015ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015d0:	4313      	orrs	r3, r2
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff fdb9 	bl	8001160 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	619a      	str	r2, [r3, #24]
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	ff20810f 	.word	0xff20810f

08001604 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001616:	3318      	adds	r3, #24
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <ETH_SetDMAConfig+0x114>)
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	7b1b      	ldrb	r3, [r3, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <ETH_SetDMAConfig+0x2e>
 800162c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001630:	e000      	b.n	8001634 <ETH_SetDMAConfig+0x30>
 8001632:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	7b5b      	ldrb	r3, [r3, #13]
 8001638:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800163a:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	7f52      	ldrb	r2, [r2, #29]
 8001640:	2a00      	cmp	r2, #0
 8001642:	d102      	bne.n	800164a <ETH_SetDMAConfig+0x46>
 8001644:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001648:	e000      	b.n	800164c <ETH_SetDMAConfig+0x48>
 800164a:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800164c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	7b9b      	ldrb	r3, [r3, #14]
 8001652:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001654:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800165a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	7f1b      	ldrb	r3, [r3, #28]
 8001660:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001662:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	7f9b      	ldrb	r3, [r3, #30]
 8001668:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800166a:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001670:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001678:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800167a:	4313      	orrs	r3, r2
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168a:	3318      	adds	r3, #24
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001698:	3318      	adds	r3, #24
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800169e:	2001      	movs	r0, #1
 80016a0:	f7ff fd5e 	bl	8001160 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ac:	3318      	adds	r3, #24
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	791b      	ldrb	r3, [r3, #4]
 80016b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016e0:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ee:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7ff fd2f 	bl	8001160 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	601a      	str	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	f8de3f23 	.word	0xf8de3f23

0800171c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0a6      	sub	sp, #152	; 0x98
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001724:	2301      	movs	r3, #1
 8001726:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800172a:	2301      	movs	r3, #1
 800172c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001730:	2300      	movs	r3, #0
 8001732:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800173a:	2301      	movs	r3, #1
 800173c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001746:	2301      	movs	r3, #1
 8001748:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001758:	2300      	movs	r3, #0
 800175a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001762:	2300      	movs	r3, #0
 8001764:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800177e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001784:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001788:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001790:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001794:	4619      	mov	r1, r3
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fe84 	bl	80014a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800179c:	2301      	movs	r3, #1
 800179e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017a0:	2301      	movs	r3, #1
 80017a2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017a4:	2301      	movs	r3, #1
 80017a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017c8:	2301      	movs	r3, #1
 80017ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017de:	2301      	movs	r3, #1
 80017e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	4619      	mov	r1, r3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ff06 	bl	8001604 <ETH_SetDMAConfig>
}
 80017f8:	bf00      	nop
 80017fa:	3798      	adds	r7, #152	; 0x98
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3305      	adds	r3, #5
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	3204      	adds	r2, #4
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <ETH_MACAddressConfig+0x68>)
 8001822:	4413      	add	r3, r2
 8001824:	461a      	mov	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3303      	adds	r3, #3
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	061a      	lsls	r2, r3, #24
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3302      	adds	r3, #2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	4313      	orrs	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	7812      	ldrb	r2, [r2, #0]
 800184a:	4313      	orrs	r3, r2
 800184c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <ETH_MACAddressConfig+0x6c>)
 8001852:	4413      	add	r3, r2
 8001854:	461a      	mov	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	bf00      	nop
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40028040 	.word	0x40028040
 800186c:	40028044 	.word	0x40028044

08001870 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e03e      	b.n	80018fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68d9      	ldr	r1, [r3, #12]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	3206      	adds	r2, #6
 80018b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d80c      	bhi.n	80018e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68d9      	ldr	r1, [r3, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	461a      	mov	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	e004      	b.n	80018ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	461a      	mov	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3301      	adds	r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d9bd      	bls.n	800187e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001914:	3310      	adds	r3, #16
 8001916:	601a      	str	r2, [r3, #0]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e046      	b.n	80019c0 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6919      	ldr	r1, [r3, #16]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2200      	movs	r2, #0
 8001960:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800196e:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001976:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	3212      	adds	r2, #18
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d80c      	bhi.n	80019b0 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6919      	ldr	r1, [r3, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	461a      	mov	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	e004      	b.n	80019ba <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	461a      	mov	r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3301      	adds	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d9b5      	bls.n	8001932 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f0:	330c      	adds	r3, #12
 80019f2:	601a      	str	r2, [r3, #0]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e177      	b.n	8001d0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f040 8166 	bne.w	8001d06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d005      	beq.n	8001a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d130      	bne.n	8001ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0201 	and.w	r2, r3, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d017      	beq.n	8001af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d123      	bne.n	8001b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80c0 	beq.w	8001d06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <HAL_GPIO_Init+0x320>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a64      	ldr	r2, [pc, #400]	; (8001d20 <HAL_GPIO_Init+0x320>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b62      	ldr	r3, [pc, #392]	; (8001d20 <HAL_GPIO_Init+0x320>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba2:	4a60      	ldr	r2, [pc, #384]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a57      	ldr	r2, [pc, #348]	; (8001d28 <HAL_GPIO_Init+0x328>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d037      	beq.n	8001c3e <HAL_GPIO_Init+0x23e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a56      	ldr	r2, [pc, #344]	; (8001d2c <HAL_GPIO_Init+0x32c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d031      	beq.n	8001c3a <HAL_GPIO_Init+0x23a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a55      	ldr	r2, [pc, #340]	; (8001d30 <HAL_GPIO_Init+0x330>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d02b      	beq.n	8001c36 <HAL_GPIO_Init+0x236>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a54      	ldr	r2, [pc, #336]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d025      	beq.n	8001c32 <HAL_GPIO_Init+0x232>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a53      	ldr	r2, [pc, #332]	; (8001d38 <HAL_GPIO_Init+0x338>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d01f      	beq.n	8001c2e <HAL_GPIO_Init+0x22e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_GPIO_Init+0x33c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d019      	beq.n	8001c2a <HAL_GPIO_Init+0x22a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a51      	ldr	r2, [pc, #324]	; (8001d40 <HAL_GPIO_Init+0x340>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0x226>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a50      	ldr	r2, [pc, #320]	; (8001d44 <HAL_GPIO_Init+0x344>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_Init+0x222>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <HAL_GPIO_Init+0x348>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_Init+0x21e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <HAL_GPIO_Init+0x34c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_Init+0x21a>
 8001c16:	2309      	movs	r3, #9
 8001c18:	e012      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c1a:	230a      	movs	r3, #10
 8001c1c:	e010      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c1e:	2308      	movs	r3, #8
 8001c20:	e00e      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c22:	2307      	movs	r3, #7
 8001c24:	e00c      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c26:	2306      	movs	r3, #6
 8001c28:	e00a      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	e008      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c2e:	2304      	movs	r3, #4
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c32:	2303      	movs	r3, #3
 8001c34:	e004      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e002      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x240>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f002 0203 	and.w	r2, r2, #3
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	4093      	lsls	r3, r2
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c50:	4934      	ldr	r1, [pc, #208]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c82:	4a33      	ldr	r2, [pc, #204]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cac:	4a28      	ldr	r2, [pc, #160]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb2:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd6:	4a1e      	ldr	r2, [pc, #120]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d00:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	f67f ae84 	bls.w	8001a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d14:	bf00      	nop
 8001d16:	3724      	adds	r7, #36	; 0x24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40013800 	.word	0x40013800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40021400 	.word	0x40021400
 8001d40:	40021800 	.word	0x40021800
 8001d44:	40021c00 	.word	0x40021c00
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40022400 	.word	0x40022400
 8001d50:	40013c00 	.word	0x40013c00

08001d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da0:	e003      	b.n	8001daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db8:	b08f      	sub	sp, #60	; 0x3c
 8001dba:	af0a      	add	r7, sp, #40	; 0x28
 8001dbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e10f      	b.n	8001fe8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff f8c6 	bl	8000f74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2203      	movs	r2, #3
 8001dec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f001 f989 	bl	800311e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	687e      	ldr	r6, [r7, #4]
 8001e14:	466d      	mov	r5, sp
 8001e16:	f106 0410 	add.w	r4, r6, #16
 8001e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e2a:	1d33      	adds	r3, r6, #4
 8001e2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f001 f914 	bl	800305c <USB_CoreInit>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0d0      	b.n	8001fe8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f001 f977 	bl	8003140 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	e04a      	b.n	8001eee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	333d      	adds	r3, #61	; 0x3d
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	333c      	adds	r3, #60	; 0x3c
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	b298      	uxth	r0, r3
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	3344      	adds	r3, #68	; 0x44
 8001e94:	4602      	mov	r2, r0
 8001e96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3340      	adds	r3, #64	; 0x40
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3348      	adds	r3, #72	; 0x48
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	334c      	adds	r3, #76	; 0x4c
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3354      	adds	r3, #84	; 0x54
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	3301      	adds	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d3af      	bcc.n	8001e58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e044      	b.n	8001f88 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	3301      	adds	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3b5      	bcc.n	8001efe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	687e      	ldr	r6, [r7, #4]
 8001f9a:	466d      	mov	r5, sp
 8001f9c:	f106 0410 	add.w	r4, r6, #16
 8001fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fac:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fb0:	1d33      	adds	r3, r6, #4
 8001fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb4:	6838      	ldr	r0, [r7, #0]
 8001fb6:	f001 f90f 	bl	80031d8 <USB_DevInit>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e00d      	b.n	8001fe8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 fada 	bl	800359a <USB_DevDisconnect>

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e264      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d075      	beq.n	80020fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800200e:	4ba3      	ldr	r3, [pc, #652]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d00c      	beq.n	8002034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201a:	4ba0      	ldr	r3, [pc, #640]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002022:	2b08      	cmp	r3, #8
 8002024:	d112      	bne.n	800204c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002026:	4b9d      	ldr	r3, [pc, #628]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002032:	d10b      	bne.n	800204c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	4b99      	ldr	r3, [pc, #612]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d05b      	beq.n	80020f8 <HAL_RCC_OscConfig+0x108>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d157      	bne.n	80020f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e23f      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002054:	d106      	bne.n	8002064 <HAL_RCC_OscConfig+0x74>
 8002056:	4b91      	ldr	r3, [pc, #580]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a90      	ldr	r2, [pc, #576]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e01d      	b.n	80020a0 <HAL_RCC_OscConfig+0xb0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x98>
 800206e:	4b8b      	ldr	r3, [pc, #556]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a8a      	ldr	r2, [pc, #552]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b88      	ldr	r3, [pc, #544]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a87      	ldr	r2, [pc, #540]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0xb0>
 8002088:	4b84      	ldr	r3, [pc, #528]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a83      	ldr	r2, [pc, #524]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800208e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b81      	ldr	r3, [pc, #516]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a80      	ldr	r2, [pc, #512]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800209a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff f84e 	bl	8001148 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b0:	f7ff f84a 	bl	8001148 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e204      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	4b76      	ldr	r3, [pc, #472]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0xc0>
 80020ce:	e014      	b.n	80020fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff f83a 	bl	8001148 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d8:	f7ff f836 	bl	8001148 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e1f0      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	4b6c      	ldr	r3, [pc, #432]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0xe8>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d063      	beq.n	80021ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002106:	4b65      	ldr	r3, [pc, #404]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002112:	4b62      	ldr	r3, [pc, #392]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800211a:	2b08      	cmp	r3, #8
 800211c:	d11c      	bne.n	8002158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211e:	4b5f      	ldr	r3, [pc, #380]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d116      	bne.n	8002158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	4b5c      	ldr	r3, [pc, #368]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_RCC_OscConfig+0x152>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e1c4      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002142:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4952      	ldr	r1, [pc, #328]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	e03a      	b.n	80021ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002160:	4b4f      	ldr	r3, [pc, #316]	; (80022a0 <HAL_RCC_OscConfig+0x2b0>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7fe ffef 	bl	8001148 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216e:	f7fe ffeb 	bl	8001148 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1a5      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	4b46      	ldr	r3, [pc, #280]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b43      	ldr	r3, [pc, #268]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4940      	ldr	r1, [pc, #256]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a2:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_OscConfig+0x2b0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe ffce 	bl	8001148 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b0:	f7fe ffca 	bl	8001148 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e184      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d030      	beq.n	800223c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d016      	beq.n	8002210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_RCC_OscConfig+0x2b4>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7fe ffae 	bl	8001148 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f0:	f7fe ffaa 	bl	8001148 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e164      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x200>
 800220e:	e015      	b.n	800223c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_RCC_OscConfig+0x2b4>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7fe ff97 	bl	8001148 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221e:	f7fe ff93 	bl	8001148 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e14d      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a0 	beq.w	800238a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10f      	bne.n	800227a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_OscConfig+0x2b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d121      	bne.n	80022ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_RCC_OscConfig+0x2b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_RCC_OscConfig+0x2b8>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002292:	f7fe ff59 	bl	8001148 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	e011      	b.n	80022be <HAL_RCC_OscConfig+0x2ce>
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	42470000 	.word	0x42470000
 80022a4:	42470e80 	.word	0x42470e80
 80022a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ac:	f7fe ff4c 	bl	8001148 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e106      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b85      	ldr	r3, [pc, #532]	; (80024d4 <HAL_RCC_OscConfig+0x4e4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d106      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
 80022d2:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a80      	ldr	r2, [pc, #512]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
 80022de:	e01c      	b.n	800231a <HAL_RCC_OscConfig+0x32a>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d10c      	bne.n	8002302 <HAL_RCC_OscConfig+0x312>
 80022e8:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a7a      	ldr	r2, [pc, #488]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	4a77      	ldr	r2, [pc, #476]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002300:	e00b      	b.n	800231a <HAL_RCC_OscConfig+0x32a>
 8002302:	4b75      	ldr	r3, [pc, #468]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	4a74      	ldr	r2, [pc, #464]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6713      	str	r3, [r2, #112]	; 0x70
 800230e:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	4a71      	ldr	r2, [pc, #452]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d015      	beq.n	800234e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002322:	f7fe ff11 	bl	8001148 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe ff0d 	bl	8001148 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0c5      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ee      	beq.n	800232a <HAL_RCC_OscConfig+0x33a>
 800234c:	e014      	b.n	8002378 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe fefb 	bl	8001148 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe fef7 	bl	8001148 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0af      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ee      	bne.n	8002356 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d105      	bne.n	800238a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a55      	ldr	r2, [pc, #340]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 809b 	beq.w	80024ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b08      	cmp	r3, #8
 800239e:	d05c      	beq.n	800245a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d141      	bne.n	800242c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a8:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <HAL_RCC_OscConfig+0x4ec>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe fecb 	bl	8001148 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b6:	f7fe fec7 	bl	8001148 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e081      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c8:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	019b      	lsls	r3, r3, #6
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	085b      	lsrs	r3, r3, #1
 80023ec:	3b01      	subs	r3, #1
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	061b      	lsls	r3, r3, #24
 80023f8:	4937      	ldr	r1, [pc, #220]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023fe:	4b37      	ldr	r3, [pc, #220]	; (80024dc <HAL_RCC_OscConfig+0x4ec>)
 8002400:	2201      	movs	r2, #1
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe fea0 	bl	8001148 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fe9c 	bl	8001148 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e056      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x41c>
 800242a:	e04e      	b.n	80024ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242c:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCC_OscConfig+0x4ec>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe fe89 	bl	8001148 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe fe85 	bl	8001148 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e03f      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244c:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x44a>
 8002458:	e037      	b.n	80024ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e032      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002466:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d028      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d121      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d11a      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002496:	4013      	ands	r3, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800249c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800249e:	4293      	cmp	r3, r2
 80024a0:	d111      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	3b01      	subs	r3, #1
 80024b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40007000 	.word	0x40007000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	42470060 	.word	0x42470060

080024e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0cc      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f4:	4b68      	ldr	r3, [pc, #416]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d90c      	bls.n	800251c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b65      	ldr	r3, [pc, #404]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b63      	ldr	r3, [pc, #396]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0b8      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002534:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a58      	ldr	r2, [pc, #352]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800253e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800254c:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002558:	4b50      	ldr	r3, [pc, #320]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	494d      	ldr	r1, [pc, #308]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d044      	beq.n	8002600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b47      	ldr	r3, [pc, #284]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d119      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e07f      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d003      	beq.n	800259e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259a:	2b03      	cmp	r3, #3
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4b3f      	ldr	r3, [pc, #252]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06f      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ae:	4b3b      	ldr	r3, [pc, #236]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e067      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025be:	4b37      	ldr	r3, [pc, #220]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f023 0203 	bic.w	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4934      	ldr	r1, [pc, #208]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d0:	f7fe fdba 	bl	8001148 <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d8:	f7fe fdb6 	bl	8001148 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e04f      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	4b2b      	ldr	r3, [pc, #172]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 020c 	and.w	r2, r3, #12
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1eb      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002600:	4b25      	ldr	r3, [pc, #148]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d20c      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e032      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4916      	ldr	r1, [pc, #88]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	490e      	ldr	r1, [pc, #56]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002666:	f000 f821 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800266a:	4601      	mov	r1, r0
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	5cd3      	ldrb	r3, [r2, r3]
 800267a:	fa21 f303 	lsr.w	r3, r1, r3
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fd1a 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023c00 	.word	0x40023c00
 800269c:	40023800 	.word	0x40023800
 80026a0:	08003fb8 	.word	0x08003fb8
 80026a4:	20000000 	.word	0x20000000
 80026a8:	20000004 	.word	0x20000004

080026ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	2300      	movs	r3, #0
 80026bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c2:	4b63      	ldr	r3, [pc, #396]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d007      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0x32>
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d008      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x38>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 80b4 	bne.w	8002840 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d8:	4b5e      	ldr	r3, [pc, #376]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026da:	60bb      	str	r3, [r7, #8]
       break;
 80026dc:	e0b3      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026de:	4b5e      	ldr	r3, [pc, #376]	; (8002858 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80026e0:	60bb      	str	r3, [r7, #8]
      break;
 80026e2:	e0b0      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e4:	4b5a      	ldr	r3, [pc, #360]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ee:	4b58      	ldr	r3, [pc, #352]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d04a      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fa:	4b55      	ldr	r3, [pc, #340]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	099b      	lsrs	r3, r3, #6
 8002700:	f04f 0400 	mov.w	r4, #0
 8002704:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	ea03 0501 	and.w	r5, r3, r1
 8002710:	ea04 0602 	and.w	r6, r4, r2
 8002714:	4629      	mov	r1, r5
 8002716:	4632      	mov	r2, r6
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	f04f 0400 	mov.w	r4, #0
 8002720:	0154      	lsls	r4, r2, #5
 8002722:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002726:	014b      	lsls	r3, r1, #5
 8002728:	4619      	mov	r1, r3
 800272a:	4622      	mov	r2, r4
 800272c:	1b49      	subs	r1, r1, r5
 800272e:	eb62 0206 	sbc.w	r2, r2, r6
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	f04f 0400 	mov.w	r4, #0
 800273a:	0194      	lsls	r4, r2, #6
 800273c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002740:	018b      	lsls	r3, r1, #6
 8002742:	1a5b      	subs	r3, r3, r1
 8002744:	eb64 0402 	sbc.w	r4, r4, r2
 8002748:	f04f 0100 	mov.w	r1, #0
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	00e2      	lsls	r2, r4, #3
 8002752:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002756:	00d9      	lsls	r1, r3, #3
 8002758:	460b      	mov	r3, r1
 800275a:	4614      	mov	r4, r2
 800275c:	195b      	adds	r3, r3, r5
 800275e:	eb44 0406 	adc.w	r4, r4, r6
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	0262      	lsls	r2, r4, #9
 800276c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002770:	0259      	lsls	r1, r3, #9
 8002772:	460b      	mov	r3, r1
 8002774:	4614      	mov	r4, r2
 8002776:	4618      	mov	r0, r3
 8002778:	4621      	mov	r1, r4
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f04f 0400 	mov.w	r4, #0
 8002780:	461a      	mov	r2, r3
 8002782:	4623      	mov	r3, r4
 8002784:	f7fd fd8c 	bl	80002a0 <__aeabi_uldivmod>
 8002788:	4603      	mov	r3, r0
 800278a:	460c      	mov	r4, r1
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	e049      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002790:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	f04f 0400 	mov.w	r4, #0
 800279a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	ea03 0501 	and.w	r5, r3, r1
 80027a6:	ea04 0602 	and.w	r6, r4, r2
 80027aa:	4629      	mov	r1, r5
 80027ac:	4632      	mov	r2, r6
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	f04f 0400 	mov.w	r4, #0
 80027b6:	0154      	lsls	r4, r2, #5
 80027b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027bc:	014b      	lsls	r3, r1, #5
 80027be:	4619      	mov	r1, r3
 80027c0:	4622      	mov	r2, r4
 80027c2:	1b49      	subs	r1, r1, r5
 80027c4:	eb62 0206 	sbc.w	r2, r2, r6
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	f04f 0400 	mov.w	r4, #0
 80027d0:	0194      	lsls	r4, r2, #6
 80027d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027d6:	018b      	lsls	r3, r1, #6
 80027d8:	1a5b      	subs	r3, r3, r1
 80027da:	eb64 0402 	sbc.w	r4, r4, r2
 80027de:	f04f 0100 	mov.w	r1, #0
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	00e2      	lsls	r2, r4, #3
 80027e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027ec:	00d9      	lsls	r1, r3, #3
 80027ee:	460b      	mov	r3, r1
 80027f0:	4614      	mov	r4, r2
 80027f2:	195b      	adds	r3, r3, r5
 80027f4:	eb44 0406 	adc.w	r4, r4, r6
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	02a2      	lsls	r2, r4, #10
 8002802:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002806:	0299      	lsls	r1, r3, #10
 8002808:	460b      	mov	r3, r1
 800280a:	4614      	mov	r4, r2
 800280c:	4618      	mov	r0, r3
 800280e:	4621      	mov	r1, r4
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f04f 0400 	mov.w	r4, #0
 8002816:	461a      	mov	r2, r3
 8002818:	4623      	mov	r3, r4
 800281a:	f7fd fd41 	bl	80002a0 <__aeabi_uldivmod>
 800281e:	4603      	mov	r3, r0
 8002820:	460c      	mov	r4, r1
 8002822:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	0c1b      	lsrs	r3, r3, #16
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	3301      	adds	r3, #1
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	60bb      	str	r3, [r7, #8]
      break;
 800283e:	e002      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002842:	60bb      	str	r3, [r7, #8]
      break;
 8002844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002846:	68bb      	ldr	r3, [r7, #8]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	00f42400 	.word	0x00f42400
 8002858:	007a1200 	.word	0x007a1200

0800285c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_RCC_GetHCLKFreq+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000000 	.word	0x20000000

08002874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002878:	f7ff fff0 	bl	800285c <HAL_RCC_GetHCLKFreq>
 800287c:	4601      	mov	r1, r0
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	0a9b      	lsrs	r3, r3, #10
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	4a03      	ldr	r2, [pc, #12]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40023800 	.word	0x40023800
 8002898:	08003fc8 	.word	0x08003fc8

0800289c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028a0:	f7ff ffdc 	bl	800285c <HAL_RCC_GetHCLKFreq>
 80028a4:	4601      	mov	r1, r0
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	0b5b      	lsrs	r3, r3, #13
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4a03      	ldr	r2, [pc, #12]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	08003fc8 	.word	0x08003fc8

080028c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e03f      	b.n	8002956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe fa78 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2224      	movs	r2, #36	; 0x24
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f9cb 	bl	8002ca4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800291c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800292c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800293c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b08a      	sub	sp, #40	; 0x28
 8002962:	af02      	add	r7, sp, #8
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b20      	cmp	r3, #32
 800297c:	d17c      	bne.n	8002a78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_UART_Transmit+0x2c>
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e075      	b.n	8002a7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_UART_Transmit+0x3e>
 8002998:	2302      	movs	r3, #2
 800299a:	e06e      	b.n	8002a7a <HAL_UART_Transmit+0x11c>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2221      	movs	r2, #33	; 0x21
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029b2:	f7fe fbc9 	bl	8001148 <HAL_GetTick>
 80029b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	88fa      	ldrh	r2, [r7, #6]
 80029bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	88fa      	ldrh	r2, [r7, #6]
 80029c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029cc:	d108      	bne.n	80029e0 <HAL_UART_Transmit+0x82>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d104      	bne.n	80029e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	e003      	b.n	80029e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029f0:	e02a      	b.n	8002a48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f8e2 	bl	8002bc6 <UART_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e036      	b.n	8002a7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10b      	bne.n	8002a2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	3302      	adds	r3, #2
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	e007      	b.n	8002a3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	3301      	adds	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1cf      	bne.n	80029f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2140      	movs	r1, #64	; 0x40
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f8b2 	bl	8002bc6 <UART_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e006      	b.n	8002a7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b08a      	sub	sp, #40	; 0x28
 8002a86:	af02      	add	r7, sp, #8
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	f040 808c 	bne.w	8002bbc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_UART_Receive+0x2e>
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e084      	b.n	8002bbe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_UART_Receive+0x40>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e07d      	b.n	8002bbe <HAL_UART_Receive+0x13c>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2222      	movs	r2, #34	; 0x22
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ade:	f7fe fb33 	bl	8001148 <HAL_GetTick>
 8002ae2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	88fa      	ldrh	r2, [r7, #6]
 8002ae8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	88fa      	ldrh	r2, [r7, #6]
 8002aee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af8:	d108      	bne.n	8002b0c <HAL_UART_Receive+0x8a>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d104      	bne.n	8002b0c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	e003      	b.n	8002b14 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b1c:	e043      	b.n	8002ba6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2120      	movs	r1, #32
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f84c 	bl	8002bc6 <UART_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e042      	b.n	8002bbe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10c      	bne.n	8002b58 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	3302      	adds	r3, #2
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	e01f      	b.n	8002b98 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b60:	d007      	beq.n	8002b72 <HAL_UART_Receive+0xf0>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10a      	bne.n	8002b80 <HAL_UART_Receive+0xfe>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e008      	b.n	8002b92 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3301      	adds	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1b6      	bne.n	8002b1e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b090      	sub	sp, #64	; 0x40
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bd6:	e050      	b.n	8002c7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bde:	d04c      	beq.n	8002c7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002be6:	f7fe faaf 	bl	8001148 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d241      	bcs.n	8002c7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	e853 3f00 	ldrex	r3, [r3]
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c16:	637a      	str	r2, [r7, #52]	; 0x34
 8002c18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c1e:	e841 2300 	strex	r3, r2, [r1]
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e5      	bne.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3314      	adds	r3, #20
 8002c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	e853 3f00 	ldrex	r3, [r3]
 8002c38:	613b      	str	r3, [r7, #16]
   return(result);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3314      	adds	r3, #20
 8002c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c4a:	623a      	str	r2, [r7, #32]
 8002c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4e:	69f9      	ldr	r1, [r7, #28]
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	e841 2300 	strex	r3, r2, [r1]
 8002c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e5      	bne.n	8002c2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e00f      	b.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	bf0c      	ite	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	2300      	movne	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d09f      	beq.n	8002bd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3740      	adds	r7, #64	; 0x40
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ce6:	f023 030c 	bic.w	r3, r3, #12
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4ad0      	ldr	r2, [pc, #832]	; (8003050 <UART_SetConfig+0x3ac>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <UART_SetConfig+0x7a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4ace      	ldr	r2, [pc, #824]	; (8003054 <UART_SetConfig+0x3b0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d103      	bne.n	8002d26 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d1e:	f7ff fdbd 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	e002      	b.n	8002d2c <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d26:	f7ff fda5 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 8002d2a:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d34:	f040 80ba 	bne.w	8002eac <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	461d      	mov	r5, r3
 8002d3c:	f04f 0600 	mov.w	r6, #0
 8002d40:	46a8      	mov	r8, r5
 8002d42:	46b1      	mov	r9, r6
 8002d44:	eb18 0308 	adds.w	r3, r8, r8
 8002d48:	eb49 0409 	adc.w	r4, r9, r9
 8002d4c:	4698      	mov	r8, r3
 8002d4e:	46a1      	mov	r9, r4
 8002d50:	eb18 0805 	adds.w	r8, r8, r5
 8002d54:	eb49 0906 	adc.w	r9, r9, r6
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d6c:	4688      	mov	r8, r1
 8002d6e:	4691      	mov	r9, r2
 8002d70:	eb18 0005 	adds.w	r0, r8, r5
 8002d74:	eb49 0106 	adc.w	r1, r9, r6
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	461d      	mov	r5, r3
 8002d7e:	f04f 0600 	mov.w	r6, #0
 8002d82:	196b      	adds	r3, r5, r5
 8002d84:	eb46 0406 	adc.w	r4, r6, r6
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	f7fd fa88 	bl	80002a0 <__aeabi_uldivmod>
 8002d90:	4603      	mov	r3, r0
 8002d92:	460c      	mov	r4, r1
 8002d94:	461a      	mov	r2, r3
 8002d96:	4bb0      	ldr	r3, [pc, #704]	; (8003058 <UART_SetConfig+0x3b4>)
 8002d98:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	461d      	mov	r5, r3
 8002da6:	f04f 0600 	mov.w	r6, #0
 8002daa:	46a9      	mov	r9, r5
 8002dac:	46b2      	mov	sl, r6
 8002dae:	eb19 0309 	adds.w	r3, r9, r9
 8002db2:	eb4a 040a 	adc.w	r4, sl, sl
 8002db6:	4699      	mov	r9, r3
 8002db8:	46a2      	mov	sl, r4
 8002dba:	eb19 0905 	adds.w	r9, r9, r5
 8002dbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dc2:	f04f 0100 	mov.w	r1, #0
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dd6:	4689      	mov	r9, r1
 8002dd8:	4692      	mov	sl, r2
 8002dda:	eb19 0005 	adds.w	r0, r9, r5
 8002dde:	eb4a 0106 	adc.w	r1, sl, r6
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	461d      	mov	r5, r3
 8002de8:	f04f 0600 	mov.w	r6, #0
 8002dec:	196b      	adds	r3, r5, r5
 8002dee:	eb46 0406 	adc.w	r4, r6, r6
 8002df2:	461a      	mov	r2, r3
 8002df4:	4623      	mov	r3, r4
 8002df6:	f7fd fa53 	bl	80002a0 <__aeabi_uldivmod>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b95      	ldr	r3, [pc, #596]	; (8003058 <UART_SetConfig+0x3b4>)
 8002e02:	fba3 1302 	umull	r1, r3, r3, r2
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2164      	movs	r1, #100	; 0x64
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	3332      	adds	r3, #50	; 0x32
 8002e14:	4a90      	ldr	r2, [pc, #576]	; (8003058 <UART_SetConfig+0x3b4>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e22:	4498      	add	r8, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	461d      	mov	r5, r3
 8002e28:	f04f 0600 	mov.w	r6, #0
 8002e2c:	46a9      	mov	r9, r5
 8002e2e:	46b2      	mov	sl, r6
 8002e30:	eb19 0309 	adds.w	r3, r9, r9
 8002e34:	eb4a 040a 	adc.w	r4, sl, sl
 8002e38:	4699      	mov	r9, r3
 8002e3a:	46a2      	mov	sl, r4
 8002e3c:	eb19 0905 	adds.w	r9, r9, r5
 8002e40:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e58:	4689      	mov	r9, r1
 8002e5a:	4692      	mov	sl, r2
 8002e5c:	eb19 0005 	adds.w	r0, r9, r5
 8002e60:	eb4a 0106 	adc.w	r1, sl, r6
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	461d      	mov	r5, r3
 8002e6a:	f04f 0600 	mov.w	r6, #0
 8002e6e:	196b      	adds	r3, r5, r5
 8002e70:	eb46 0406 	adc.w	r4, r6, r6
 8002e74:	461a      	mov	r2, r3
 8002e76:	4623      	mov	r3, r4
 8002e78:	f7fd fa12 	bl	80002a0 <__aeabi_uldivmod>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	460c      	mov	r4, r1
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b75      	ldr	r3, [pc, #468]	; (8003058 <UART_SetConfig+0x3b4>)
 8002e84:	fba3 1302 	umull	r1, r3, r3, r2
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	2164      	movs	r1, #100	; 0x64
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	3332      	adds	r3, #50	; 0x32
 8002e96:	4a70      	ldr	r2, [pc, #448]	; (8003058 <UART_SetConfig+0x3b4>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	f003 0207 	and.w	r2, r3, #7
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4442      	add	r2, r8
 8002ea8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002eaa:	e0cc      	b.n	8003046 <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	469a      	mov	sl, r3
 8002eb0:	f04f 0b00 	mov.w	fp, #0
 8002eb4:	46d0      	mov	r8, sl
 8002eb6:	46d9      	mov	r9, fp
 8002eb8:	eb18 0308 	adds.w	r3, r8, r8
 8002ebc:	eb49 0409 	adc.w	r4, r9, r9
 8002ec0:	4698      	mov	r8, r3
 8002ec2:	46a1      	mov	r9, r4
 8002ec4:	eb18 080a 	adds.w	r8, r8, sl
 8002ec8:	eb49 090b 	adc.w	r9, r9, fp
 8002ecc:	f04f 0100 	mov.w	r1, #0
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ed8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002edc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ee0:	4688      	mov	r8, r1
 8002ee2:	4691      	mov	r9, r2
 8002ee4:	eb1a 0508 	adds.w	r5, sl, r8
 8002ee8:	eb4b 0609 	adc.w	r6, fp, r9
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	f04f 0400 	mov.w	r4, #0
 8002efe:	0094      	lsls	r4, r2, #2
 8002f00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f04:	008b      	lsls	r3, r1, #2
 8002f06:	461a      	mov	r2, r3
 8002f08:	4623      	mov	r3, r4
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	4631      	mov	r1, r6
 8002f0e:	f7fd f9c7 	bl	80002a0 <__aeabi_uldivmod>
 8002f12:	4603      	mov	r3, r0
 8002f14:	460c      	mov	r4, r1
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b4f      	ldr	r3, [pc, #316]	; (8003058 <UART_SetConfig+0x3b4>)
 8002f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	469b      	mov	fp, r3
 8002f28:	f04f 0c00 	mov.w	ip, #0
 8002f2c:	46d9      	mov	r9, fp
 8002f2e:	46e2      	mov	sl, ip
 8002f30:	eb19 0309 	adds.w	r3, r9, r9
 8002f34:	eb4a 040a 	adc.w	r4, sl, sl
 8002f38:	4699      	mov	r9, r3
 8002f3a:	46a2      	mov	sl, r4
 8002f3c:	eb19 090b 	adds.w	r9, r9, fp
 8002f40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f58:	4689      	mov	r9, r1
 8002f5a:	4692      	mov	sl, r2
 8002f5c:	eb1b 0509 	adds.w	r5, fp, r9
 8002f60:	eb4c 060a 	adc.w	r6, ip, sl
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	f04f 0400 	mov.w	r4, #0
 8002f76:	0094      	lsls	r4, r2, #2
 8002f78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f7c:	008b      	lsls	r3, r1, #2
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4623      	mov	r3, r4
 8002f82:	4628      	mov	r0, r5
 8002f84:	4631      	mov	r1, r6
 8002f86:	f7fd f98b 	bl	80002a0 <__aeabi_uldivmod>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	460c      	mov	r4, r1
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4b31      	ldr	r3, [pc, #196]	; (8003058 <UART_SetConfig+0x3b4>)
 8002f92:	fba3 1302 	umull	r1, r3, r3, r2
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2164      	movs	r1, #100	; 0x64
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	3332      	adds	r3, #50	; 0x32
 8002fa4:	4a2c      	ldr	r2, [pc, #176]	; (8003058 <UART_SetConfig+0x3b4>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb0:	4498      	add	r8, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	469b      	mov	fp, r3
 8002fb6:	f04f 0c00 	mov.w	ip, #0
 8002fba:	46d9      	mov	r9, fp
 8002fbc:	46e2      	mov	sl, ip
 8002fbe:	eb19 0309 	adds.w	r3, r9, r9
 8002fc2:	eb4a 040a 	adc.w	r4, sl, sl
 8002fc6:	4699      	mov	r9, r3
 8002fc8:	46a2      	mov	sl, r4
 8002fca:	eb19 090b 	adds.w	r9, r9, fp
 8002fce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002fd2:	f04f 0100 	mov.w	r1, #0
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fe2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fe6:	4689      	mov	r9, r1
 8002fe8:	4692      	mov	sl, r2
 8002fea:	eb1b 0509 	adds.w	r5, fp, r9
 8002fee:	eb4c 060a 	adc.w	r6, ip, sl
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	f04f 0400 	mov.w	r4, #0
 8003004:	0094      	lsls	r4, r2, #2
 8003006:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800300a:	008b      	lsls	r3, r1, #2
 800300c:	461a      	mov	r2, r3
 800300e:	4623      	mov	r3, r4
 8003010:	4628      	mov	r0, r5
 8003012:	4631      	mov	r1, r6
 8003014:	f7fd f944 	bl	80002a0 <__aeabi_uldivmod>
 8003018:	4603      	mov	r3, r0
 800301a:	460c      	mov	r4, r1
 800301c:	461a      	mov	r2, r3
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <UART_SetConfig+0x3b4>)
 8003020:	fba3 1302 	umull	r1, r3, r3, r2
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	2164      	movs	r1, #100	; 0x64
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	3332      	adds	r3, #50	; 0x32
 8003032:	4a09      	ldr	r2, [pc, #36]	; (8003058 <UART_SetConfig+0x3b4>)
 8003034:	fba2 2303 	umull	r2, r3, r2, r3
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	f003 020f 	and.w	r2, r3, #15
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4442      	add	r2, r8
 8003044:	609a      	str	r2, [r3, #8]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003050:	40011000 	.word	0x40011000
 8003054:	40011400 	.word	0x40011400
 8003058:	51eb851f 	.word	0x51eb851f

0800305c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800305c:	b084      	sub	sp, #16
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	f107 001c 	add.w	r0, r7, #28
 800306a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	2b01      	cmp	r3, #1
 8003072:	d122      	bne.n	80030ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d105      	bne.n	80030ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 faa2 	bl	80035f8 <USB_CoreReset>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	e01a      	b.n	80030f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fa96 	bl	80035f8 <USB_CoreReset>
 80030cc:	4603      	mov	r3, r0
 80030ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80030d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	639a      	str	r2, [r3, #56]	; 0x38
 80030e2:	e005      	b.n	80030f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d10b      	bne.n	800310e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f043 0206 	orr.w	r2, r3, #6
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800311a:	b004      	add	sp, #16
 800311c:	4770      	bx	lr

0800311e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f023 0201 	bic.w	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d115      	bne.n	800318e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800316e:	2001      	movs	r0, #1
 8003170:	f7fd fff6 	bl	8001160 <HAL_Delay>
      ms++;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3301      	adds	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa2e 	bl	80035dc <USB_GetMode>
 8003180:	4603      	mov	r3, r0
 8003182:	2b01      	cmp	r3, #1
 8003184:	d01e      	beq.n	80031c4 <USB_SetCurrentMode+0x84>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b31      	cmp	r3, #49	; 0x31
 800318a:	d9f0      	bls.n	800316e <USB_SetCurrentMode+0x2e>
 800318c:	e01a      	b.n	80031c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d115      	bne.n	80031c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80031a0:	2001      	movs	r0, #1
 80031a2:	f7fd ffdd 	bl	8001160 <HAL_Delay>
      ms++;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3301      	adds	r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fa15 	bl	80035dc <USB_GetMode>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <USB_SetCurrentMode+0x84>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b31      	cmp	r3, #49	; 0x31
 80031bc:	d9f0      	bls.n	80031a0 <USB_SetCurrentMode+0x60>
 80031be:	e001      	b.n	80031c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e005      	b.n	80031d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b32      	cmp	r3, #50	; 0x32
 80031c8:	d101      	bne.n	80031ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031d8:	b084      	sub	sp, #16
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80031e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	e009      	b.n	800320c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3340      	adds	r3, #64	; 0x40
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	3301      	adds	r3, #1
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b0e      	cmp	r3, #14
 8003210:	d9f2      	bls.n	80031f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d11c      	bne.n	8003252 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003226:	f043 0302 	orr.w	r3, r3, #2
 800322a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
 8003250:	e00b      	b.n	800326a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003270:	461a      	mov	r2, r3
 8003272:	2300      	movs	r3, #0
 8003274:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327c:	4619      	mov	r1, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003284:	461a      	mov	r2, r3
 8003286:	680b      	ldr	r3, [r1, #0]
 8003288:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328c:	2b01      	cmp	r3, #1
 800328e:	d10c      	bne.n	80032aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d104      	bne.n	80032a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003296:	2100      	movs	r1, #0
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f965 	bl	8003568 <USB_SetDevSpeed>
 800329e:	e008      	b.n	80032b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80032a0:	2101      	movs	r1, #1
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f960 	bl	8003568 <USB_SetDevSpeed>
 80032a8:	e003      	b.n	80032b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80032aa:	2103      	movs	r1, #3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f95b 	bl	8003568 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80032b2:	2110      	movs	r1, #16
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f8f3 	bl	80034a0 <USB_FlushTxFifo>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f91f 	bl	8003508 <USB_FlushRxFifo>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032da:	461a      	mov	r2, r3
 80032dc:	2300      	movs	r3, #0
 80032de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e6:	461a      	mov	r2, r3
 80032e8:	2300      	movs	r3, #0
 80032ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f2:	461a      	mov	r2, r3
 80032f4:	2300      	movs	r3, #0
 80032f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	e043      	b.n	8003386 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003314:	d118      	bne.n	8003348 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003328:	461a      	mov	r2, r3
 800332a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e013      	b.n	800335a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4413      	add	r3, r2
 800333a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333e:	461a      	mov	r2, r3
 8003340:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e008      	b.n	800335a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003354:	461a      	mov	r2, r3
 8003356:	2300      	movs	r3, #0
 8003358:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003366:	461a      	mov	r2, r3
 8003368:	2300      	movs	r3, #0
 800336a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003378:	461a      	mov	r2, r3
 800337a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800337e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	3301      	adds	r3, #1
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	429a      	cmp	r2, r3
 800338c:	d3b7      	bcc.n	80032fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	e043      	b.n	800341c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033aa:	d118      	bne.n	80033de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	461a      	mov	r2, r3
 80033c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e013      	b.n	80033f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d4:	461a      	mov	r2, r3
 80033d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	e008      	b.n	80033f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ea:	461a      	mov	r2, r3
 80033ec:	2300      	movs	r3, #0
 80033ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fc:	461a      	mov	r2, r3
 80033fe:	2300      	movs	r3, #0
 8003400:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340e:	461a      	mov	r2, r3
 8003410:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003414:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	3301      	adds	r3, #1
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	429a      	cmp	r2, r3
 8003422:	d3b7      	bcc.n	8003394 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003436:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003444:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f043 0210 	orr.w	r2, r3, #16
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	4b0f      	ldr	r3, [pc, #60]	; (800349c <USB_DevInit+0x2c4>)
 800345e:	4313      	orrs	r3, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f043 0208 	orr.w	r2, r3, #8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d107      	bne.n	800348c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800348c:	7dfb      	ldrb	r3, [r7, #23]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003498:	b004      	add	sp, #16
 800349a:	4770      	bx	lr
 800349c:	803c3800 	.word	0x803c3800

080034a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	3301      	adds	r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a13      	ldr	r2, [pc, #76]	; (8003504 <USB_FlushTxFifo+0x64>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e01b      	b.n	80034f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	daf2      	bge.n	80034ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	019b      	lsls	r3, r3, #6
 80034d0:	f043 0220 	orr.w	r2, r3, #32
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3301      	adds	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4a08      	ldr	r2, [pc, #32]	; (8003504 <USB_FlushTxFifo+0x64>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e006      	b.n	80034f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d0f0      	beq.n	80034d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	00030d40 	.word	0x00030d40

08003508 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3301      	adds	r3, #1
 8003518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a11      	ldr	r2, [pc, #68]	; (8003564 <USB_FlushRxFifo+0x5c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e018      	b.n	8003558 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	daf2      	bge.n	8003514 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2210      	movs	r2, #16
 8003536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3301      	adds	r3, #1
 800353c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4a08      	ldr	r2, [pc, #32]	; (8003564 <USB_FlushRxFifo+0x5c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e006      	b.n	8003558 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b10      	cmp	r3, #16
 8003554:	d0f0      	beq.n	8003538 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	00030d40 	.word	0x00030d40

08003568 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	68f9      	ldr	r1, [r7, #12]
 8003584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80035b4:	f023 0303 	bic.w	r3, r3, #3
 80035b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	f003 0301 	and.w	r3, r3, #1
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3301      	adds	r3, #1
 8003608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a13      	ldr	r2, [pc, #76]	; (800365c <USB_CoreReset+0x64>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e01b      	b.n	800364e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	daf2      	bge.n	8003604 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f043 0201 	orr.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3301      	adds	r3, #1
 8003632:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a09      	ldr	r2, [pc, #36]	; (800365c <USB_CoreReset+0x64>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e006      	b.n	800364e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d0f0      	beq.n	800362e <USB_CoreReset+0x36>

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	00030d40 	.word	0x00030d40

08003660 <__errno>:
 8003660:	4b01      	ldr	r3, [pc, #4]	; (8003668 <__errno+0x8>)
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	2000000c 	.word	0x2000000c

0800366c <__libc_init_array>:
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	4e0d      	ldr	r6, [pc, #52]	; (80036a4 <__libc_init_array+0x38>)
 8003670:	4c0d      	ldr	r4, [pc, #52]	; (80036a8 <__libc_init_array+0x3c>)
 8003672:	1ba4      	subs	r4, r4, r6
 8003674:	10a4      	asrs	r4, r4, #2
 8003676:	2500      	movs	r5, #0
 8003678:	42a5      	cmp	r5, r4
 800367a:	d109      	bne.n	8003690 <__libc_init_array+0x24>
 800367c:	4e0b      	ldr	r6, [pc, #44]	; (80036ac <__libc_init_array+0x40>)
 800367e:	4c0c      	ldr	r4, [pc, #48]	; (80036b0 <__libc_init_array+0x44>)
 8003680:	f000 fc26 	bl	8003ed0 <_init>
 8003684:	1ba4      	subs	r4, r4, r6
 8003686:	10a4      	asrs	r4, r4, #2
 8003688:	2500      	movs	r5, #0
 800368a:	42a5      	cmp	r5, r4
 800368c:	d105      	bne.n	800369a <__libc_init_array+0x2e>
 800368e:	bd70      	pop	{r4, r5, r6, pc}
 8003690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003694:	4798      	blx	r3
 8003696:	3501      	adds	r5, #1
 8003698:	e7ee      	b.n	8003678 <__libc_init_array+0xc>
 800369a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800369e:	4798      	blx	r3
 80036a0:	3501      	adds	r5, #1
 80036a2:	e7f2      	b.n	800368a <__libc_init_array+0x1e>
 80036a4:	0800400c 	.word	0x0800400c
 80036a8:	0800400c 	.word	0x0800400c
 80036ac:	0800400c 	.word	0x0800400c
 80036b0:	08004010 	.word	0x08004010

080036b4 <memset>:
 80036b4:	4402      	add	r2, r0
 80036b6:	4603      	mov	r3, r0
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d100      	bne.n	80036be <memset+0xa>
 80036bc:	4770      	bx	lr
 80036be:	f803 1b01 	strb.w	r1, [r3], #1
 80036c2:	e7f9      	b.n	80036b8 <memset+0x4>

080036c4 <_vsiprintf_r>:
 80036c4:	b500      	push	{lr}
 80036c6:	b09b      	sub	sp, #108	; 0x6c
 80036c8:	9100      	str	r1, [sp, #0]
 80036ca:	9104      	str	r1, [sp, #16]
 80036cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036d0:	9105      	str	r1, [sp, #20]
 80036d2:	9102      	str	r1, [sp, #8]
 80036d4:	4905      	ldr	r1, [pc, #20]	; (80036ec <_vsiprintf_r+0x28>)
 80036d6:	9103      	str	r1, [sp, #12]
 80036d8:	4669      	mov	r1, sp
 80036da:	f000 f86d 	bl	80037b8 <_svfiprintf_r>
 80036de:	9b00      	ldr	r3, [sp, #0]
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	b01b      	add	sp, #108	; 0x6c
 80036e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80036ea:	bf00      	nop
 80036ec:	ffff0208 	.word	0xffff0208

080036f0 <vsiprintf>:
 80036f0:	4613      	mov	r3, r2
 80036f2:	460a      	mov	r2, r1
 80036f4:	4601      	mov	r1, r0
 80036f6:	4802      	ldr	r0, [pc, #8]	; (8003700 <vsiprintf+0x10>)
 80036f8:	6800      	ldr	r0, [r0, #0]
 80036fa:	f7ff bfe3 	b.w	80036c4 <_vsiprintf_r>
 80036fe:	bf00      	nop
 8003700:	2000000c 	.word	0x2000000c

08003704 <__ssputs_r>:
 8003704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003708:	688e      	ldr	r6, [r1, #8]
 800370a:	429e      	cmp	r6, r3
 800370c:	4682      	mov	sl, r0
 800370e:	460c      	mov	r4, r1
 8003710:	4690      	mov	r8, r2
 8003712:	4699      	mov	r9, r3
 8003714:	d837      	bhi.n	8003786 <__ssputs_r+0x82>
 8003716:	898a      	ldrh	r2, [r1, #12]
 8003718:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800371c:	d031      	beq.n	8003782 <__ssputs_r+0x7e>
 800371e:	6825      	ldr	r5, [r4, #0]
 8003720:	6909      	ldr	r1, [r1, #16]
 8003722:	1a6f      	subs	r7, r5, r1
 8003724:	6965      	ldr	r5, [r4, #20]
 8003726:	2302      	movs	r3, #2
 8003728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800372c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003730:	f109 0301 	add.w	r3, r9, #1
 8003734:	443b      	add	r3, r7
 8003736:	429d      	cmp	r5, r3
 8003738:	bf38      	it	cc
 800373a:	461d      	movcc	r5, r3
 800373c:	0553      	lsls	r3, r2, #21
 800373e:	d530      	bpl.n	80037a2 <__ssputs_r+0x9e>
 8003740:	4629      	mov	r1, r5
 8003742:	f000 fb2b 	bl	8003d9c <_malloc_r>
 8003746:	4606      	mov	r6, r0
 8003748:	b950      	cbnz	r0, 8003760 <__ssputs_r+0x5c>
 800374a:	230c      	movs	r3, #12
 800374c:	f8ca 3000 	str.w	r3, [sl]
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003756:	81a3      	strh	r3, [r4, #12]
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003760:	463a      	mov	r2, r7
 8003762:	6921      	ldr	r1, [r4, #16]
 8003764:	f000 faa8 	bl	8003cb8 <memcpy>
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800376e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003772:	81a3      	strh	r3, [r4, #12]
 8003774:	6126      	str	r6, [r4, #16]
 8003776:	6165      	str	r5, [r4, #20]
 8003778:	443e      	add	r6, r7
 800377a:	1bed      	subs	r5, r5, r7
 800377c:	6026      	str	r6, [r4, #0]
 800377e:	60a5      	str	r5, [r4, #8]
 8003780:	464e      	mov	r6, r9
 8003782:	454e      	cmp	r6, r9
 8003784:	d900      	bls.n	8003788 <__ssputs_r+0x84>
 8003786:	464e      	mov	r6, r9
 8003788:	4632      	mov	r2, r6
 800378a:	4641      	mov	r1, r8
 800378c:	6820      	ldr	r0, [r4, #0]
 800378e:	f000 fa9e 	bl	8003cce <memmove>
 8003792:	68a3      	ldr	r3, [r4, #8]
 8003794:	1b9b      	subs	r3, r3, r6
 8003796:	60a3      	str	r3, [r4, #8]
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	441e      	add	r6, r3
 800379c:	6026      	str	r6, [r4, #0]
 800379e:	2000      	movs	r0, #0
 80037a0:	e7dc      	b.n	800375c <__ssputs_r+0x58>
 80037a2:	462a      	mov	r2, r5
 80037a4:	f000 fb54 	bl	8003e50 <_realloc_r>
 80037a8:	4606      	mov	r6, r0
 80037aa:	2800      	cmp	r0, #0
 80037ac:	d1e2      	bne.n	8003774 <__ssputs_r+0x70>
 80037ae:	6921      	ldr	r1, [r4, #16]
 80037b0:	4650      	mov	r0, sl
 80037b2:	f000 faa5 	bl	8003d00 <_free_r>
 80037b6:	e7c8      	b.n	800374a <__ssputs_r+0x46>

080037b8 <_svfiprintf_r>:
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	461d      	mov	r5, r3
 80037be:	898b      	ldrh	r3, [r1, #12]
 80037c0:	061f      	lsls	r7, r3, #24
 80037c2:	b09d      	sub	sp, #116	; 0x74
 80037c4:	4680      	mov	r8, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	4616      	mov	r6, r2
 80037ca:	d50f      	bpl.n	80037ec <_svfiprintf_r+0x34>
 80037cc:	690b      	ldr	r3, [r1, #16]
 80037ce:	b96b      	cbnz	r3, 80037ec <_svfiprintf_r+0x34>
 80037d0:	2140      	movs	r1, #64	; 0x40
 80037d2:	f000 fae3 	bl	8003d9c <_malloc_r>
 80037d6:	6020      	str	r0, [r4, #0]
 80037d8:	6120      	str	r0, [r4, #16]
 80037da:	b928      	cbnz	r0, 80037e8 <_svfiprintf_r+0x30>
 80037dc:	230c      	movs	r3, #12
 80037de:	f8c8 3000 	str.w	r3, [r8]
 80037e2:	f04f 30ff 	mov.w	r0, #4294967295
 80037e6:	e0c8      	b.n	800397a <_svfiprintf_r+0x1c2>
 80037e8:	2340      	movs	r3, #64	; 0x40
 80037ea:	6163      	str	r3, [r4, #20]
 80037ec:	2300      	movs	r3, #0
 80037ee:	9309      	str	r3, [sp, #36]	; 0x24
 80037f0:	2320      	movs	r3, #32
 80037f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037f6:	2330      	movs	r3, #48	; 0x30
 80037f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037fc:	9503      	str	r5, [sp, #12]
 80037fe:	f04f 0b01 	mov.w	fp, #1
 8003802:	4637      	mov	r7, r6
 8003804:	463d      	mov	r5, r7
 8003806:	f815 3b01 	ldrb.w	r3, [r5], #1
 800380a:	b10b      	cbz	r3, 8003810 <_svfiprintf_r+0x58>
 800380c:	2b25      	cmp	r3, #37	; 0x25
 800380e:	d13e      	bne.n	800388e <_svfiprintf_r+0xd6>
 8003810:	ebb7 0a06 	subs.w	sl, r7, r6
 8003814:	d00b      	beq.n	800382e <_svfiprintf_r+0x76>
 8003816:	4653      	mov	r3, sl
 8003818:	4632      	mov	r2, r6
 800381a:	4621      	mov	r1, r4
 800381c:	4640      	mov	r0, r8
 800381e:	f7ff ff71 	bl	8003704 <__ssputs_r>
 8003822:	3001      	adds	r0, #1
 8003824:	f000 80a4 	beq.w	8003970 <_svfiprintf_r+0x1b8>
 8003828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800382a:	4453      	add	r3, sl
 800382c:	9309      	str	r3, [sp, #36]	; 0x24
 800382e:	783b      	ldrb	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 809d 	beq.w	8003970 <_svfiprintf_r+0x1b8>
 8003836:	2300      	movs	r3, #0
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003840:	9304      	str	r3, [sp, #16]
 8003842:	9307      	str	r3, [sp, #28]
 8003844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003848:	931a      	str	r3, [sp, #104]	; 0x68
 800384a:	462f      	mov	r7, r5
 800384c:	2205      	movs	r2, #5
 800384e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003852:	4850      	ldr	r0, [pc, #320]	; (8003994 <_svfiprintf_r+0x1dc>)
 8003854:	f7fc fcd4 	bl	8000200 <memchr>
 8003858:	9b04      	ldr	r3, [sp, #16]
 800385a:	b9d0      	cbnz	r0, 8003892 <_svfiprintf_r+0xda>
 800385c:	06d9      	lsls	r1, r3, #27
 800385e:	bf44      	itt	mi
 8003860:	2220      	movmi	r2, #32
 8003862:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003866:	071a      	lsls	r2, r3, #28
 8003868:	bf44      	itt	mi
 800386a:	222b      	movmi	r2, #43	; 0x2b
 800386c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003870:	782a      	ldrb	r2, [r5, #0]
 8003872:	2a2a      	cmp	r2, #42	; 0x2a
 8003874:	d015      	beq.n	80038a2 <_svfiprintf_r+0xea>
 8003876:	9a07      	ldr	r2, [sp, #28]
 8003878:	462f      	mov	r7, r5
 800387a:	2000      	movs	r0, #0
 800387c:	250a      	movs	r5, #10
 800387e:	4639      	mov	r1, r7
 8003880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003884:	3b30      	subs	r3, #48	; 0x30
 8003886:	2b09      	cmp	r3, #9
 8003888:	d94d      	bls.n	8003926 <_svfiprintf_r+0x16e>
 800388a:	b1b8      	cbz	r0, 80038bc <_svfiprintf_r+0x104>
 800388c:	e00f      	b.n	80038ae <_svfiprintf_r+0xf6>
 800388e:	462f      	mov	r7, r5
 8003890:	e7b8      	b.n	8003804 <_svfiprintf_r+0x4c>
 8003892:	4a40      	ldr	r2, [pc, #256]	; (8003994 <_svfiprintf_r+0x1dc>)
 8003894:	1a80      	subs	r0, r0, r2
 8003896:	fa0b f000 	lsl.w	r0, fp, r0
 800389a:	4318      	orrs	r0, r3
 800389c:	9004      	str	r0, [sp, #16]
 800389e:	463d      	mov	r5, r7
 80038a0:	e7d3      	b.n	800384a <_svfiprintf_r+0x92>
 80038a2:	9a03      	ldr	r2, [sp, #12]
 80038a4:	1d11      	adds	r1, r2, #4
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	9103      	str	r1, [sp, #12]
 80038aa:	2a00      	cmp	r2, #0
 80038ac:	db01      	blt.n	80038b2 <_svfiprintf_r+0xfa>
 80038ae:	9207      	str	r2, [sp, #28]
 80038b0:	e004      	b.n	80038bc <_svfiprintf_r+0x104>
 80038b2:	4252      	negs	r2, r2
 80038b4:	f043 0302 	orr.w	r3, r3, #2
 80038b8:	9207      	str	r2, [sp, #28]
 80038ba:	9304      	str	r3, [sp, #16]
 80038bc:	783b      	ldrb	r3, [r7, #0]
 80038be:	2b2e      	cmp	r3, #46	; 0x2e
 80038c0:	d10c      	bne.n	80038dc <_svfiprintf_r+0x124>
 80038c2:	787b      	ldrb	r3, [r7, #1]
 80038c4:	2b2a      	cmp	r3, #42	; 0x2a
 80038c6:	d133      	bne.n	8003930 <_svfiprintf_r+0x178>
 80038c8:	9b03      	ldr	r3, [sp, #12]
 80038ca:	1d1a      	adds	r2, r3, #4
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	9203      	str	r2, [sp, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bfb8      	it	lt
 80038d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80038d8:	3702      	adds	r7, #2
 80038da:	9305      	str	r3, [sp, #20]
 80038dc:	4d2e      	ldr	r5, [pc, #184]	; (8003998 <_svfiprintf_r+0x1e0>)
 80038de:	7839      	ldrb	r1, [r7, #0]
 80038e0:	2203      	movs	r2, #3
 80038e2:	4628      	mov	r0, r5
 80038e4:	f7fc fc8c 	bl	8000200 <memchr>
 80038e8:	b138      	cbz	r0, 80038fa <_svfiprintf_r+0x142>
 80038ea:	2340      	movs	r3, #64	; 0x40
 80038ec:	1b40      	subs	r0, r0, r5
 80038ee:	fa03 f000 	lsl.w	r0, r3, r0
 80038f2:	9b04      	ldr	r3, [sp, #16]
 80038f4:	4303      	orrs	r3, r0
 80038f6:	3701      	adds	r7, #1
 80038f8:	9304      	str	r3, [sp, #16]
 80038fa:	7839      	ldrb	r1, [r7, #0]
 80038fc:	4827      	ldr	r0, [pc, #156]	; (800399c <_svfiprintf_r+0x1e4>)
 80038fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003902:	2206      	movs	r2, #6
 8003904:	1c7e      	adds	r6, r7, #1
 8003906:	f7fc fc7b 	bl	8000200 <memchr>
 800390a:	2800      	cmp	r0, #0
 800390c:	d038      	beq.n	8003980 <_svfiprintf_r+0x1c8>
 800390e:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <_svfiprintf_r+0x1e8>)
 8003910:	bb13      	cbnz	r3, 8003958 <_svfiprintf_r+0x1a0>
 8003912:	9b03      	ldr	r3, [sp, #12]
 8003914:	3307      	adds	r3, #7
 8003916:	f023 0307 	bic.w	r3, r3, #7
 800391a:	3308      	adds	r3, #8
 800391c:	9303      	str	r3, [sp, #12]
 800391e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003920:	444b      	add	r3, r9
 8003922:	9309      	str	r3, [sp, #36]	; 0x24
 8003924:	e76d      	b.n	8003802 <_svfiprintf_r+0x4a>
 8003926:	fb05 3202 	mla	r2, r5, r2, r3
 800392a:	2001      	movs	r0, #1
 800392c:	460f      	mov	r7, r1
 800392e:	e7a6      	b.n	800387e <_svfiprintf_r+0xc6>
 8003930:	2300      	movs	r3, #0
 8003932:	3701      	adds	r7, #1
 8003934:	9305      	str	r3, [sp, #20]
 8003936:	4619      	mov	r1, r3
 8003938:	250a      	movs	r5, #10
 800393a:	4638      	mov	r0, r7
 800393c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003940:	3a30      	subs	r2, #48	; 0x30
 8003942:	2a09      	cmp	r2, #9
 8003944:	d903      	bls.n	800394e <_svfiprintf_r+0x196>
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0c8      	beq.n	80038dc <_svfiprintf_r+0x124>
 800394a:	9105      	str	r1, [sp, #20]
 800394c:	e7c6      	b.n	80038dc <_svfiprintf_r+0x124>
 800394e:	fb05 2101 	mla	r1, r5, r1, r2
 8003952:	2301      	movs	r3, #1
 8003954:	4607      	mov	r7, r0
 8003956:	e7f0      	b.n	800393a <_svfiprintf_r+0x182>
 8003958:	ab03      	add	r3, sp, #12
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	4622      	mov	r2, r4
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <_svfiprintf_r+0x1ec>)
 8003960:	a904      	add	r1, sp, #16
 8003962:	4640      	mov	r0, r8
 8003964:	f3af 8000 	nop.w
 8003968:	f1b0 3fff 	cmp.w	r0, #4294967295
 800396c:	4681      	mov	r9, r0
 800396e:	d1d6      	bne.n	800391e <_svfiprintf_r+0x166>
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	065b      	lsls	r3, r3, #25
 8003974:	f53f af35 	bmi.w	80037e2 <_svfiprintf_r+0x2a>
 8003978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800397a:	b01d      	add	sp, #116	; 0x74
 800397c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003980:	ab03      	add	r3, sp, #12
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4622      	mov	r2, r4
 8003986:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <_svfiprintf_r+0x1ec>)
 8003988:	a904      	add	r1, sp, #16
 800398a:	4640      	mov	r0, r8
 800398c:	f000 f882 	bl	8003a94 <_printf_i>
 8003990:	e7ea      	b.n	8003968 <_svfiprintf_r+0x1b0>
 8003992:	bf00      	nop
 8003994:	08003fd0 	.word	0x08003fd0
 8003998:	08003fd6 	.word	0x08003fd6
 800399c:	08003fda 	.word	0x08003fda
 80039a0:	00000000 	.word	0x00000000
 80039a4:	08003705 	.word	0x08003705

080039a8 <_printf_common>:
 80039a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039ac:	4691      	mov	r9, r2
 80039ae:	461f      	mov	r7, r3
 80039b0:	688a      	ldr	r2, [r1, #8]
 80039b2:	690b      	ldr	r3, [r1, #16]
 80039b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039b8:	4293      	cmp	r3, r2
 80039ba:	bfb8      	it	lt
 80039bc:	4613      	movlt	r3, r2
 80039be:	f8c9 3000 	str.w	r3, [r9]
 80039c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039c6:	4606      	mov	r6, r0
 80039c8:	460c      	mov	r4, r1
 80039ca:	b112      	cbz	r2, 80039d2 <_printf_common+0x2a>
 80039cc:	3301      	adds	r3, #1
 80039ce:	f8c9 3000 	str.w	r3, [r9]
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	0699      	lsls	r1, r3, #26
 80039d6:	bf42      	ittt	mi
 80039d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80039dc:	3302      	addmi	r3, #2
 80039de:	f8c9 3000 	strmi.w	r3, [r9]
 80039e2:	6825      	ldr	r5, [r4, #0]
 80039e4:	f015 0506 	ands.w	r5, r5, #6
 80039e8:	d107      	bne.n	80039fa <_printf_common+0x52>
 80039ea:	f104 0a19 	add.w	sl, r4, #25
 80039ee:	68e3      	ldr	r3, [r4, #12]
 80039f0:	f8d9 2000 	ldr.w	r2, [r9]
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	42ab      	cmp	r3, r5
 80039f8:	dc28      	bgt.n	8003a4c <_printf_common+0xa4>
 80039fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	3300      	adds	r3, #0
 8003a02:	bf18      	it	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	0692      	lsls	r2, r2, #26
 8003a08:	d42d      	bmi.n	8003a66 <_printf_common+0xbe>
 8003a0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a0e:	4639      	mov	r1, r7
 8003a10:	4630      	mov	r0, r6
 8003a12:	47c0      	blx	r8
 8003a14:	3001      	adds	r0, #1
 8003a16:	d020      	beq.n	8003a5a <_printf_common+0xb2>
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	68e5      	ldr	r5, [r4, #12]
 8003a1c:	f8d9 2000 	ldr.w	r2, [r9]
 8003a20:	f003 0306 	and.w	r3, r3, #6
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	bf08      	it	eq
 8003a28:	1aad      	subeq	r5, r5, r2
 8003a2a:	68a3      	ldr	r3, [r4, #8]
 8003a2c:	6922      	ldr	r2, [r4, #16]
 8003a2e:	bf0c      	ite	eq
 8003a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a34:	2500      	movne	r5, #0
 8003a36:	4293      	cmp	r3, r2
 8003a38:	bfc4      	itt	gt
 8003a3a:	1a9b      	subgt	r3, r3, r2
 8003a3c:	18ed      	addgt	r5, r5, r3
 8003a3e:	f04f 0900 	mov.w	r9, #0
 8003a42:	341a      	adds	r4, #26
 8003a44:	454d      	cmp	r5, r9
 8003a46:	d11a      	bne.n	8003a7e <_printf_common+0xd6>
 8003a48:	2000      	movs	r0, #0
 8003a4a:	e008      	b.n	8003a5e <_printf_common+0xb6>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	4652      	mov	r2, sl
 8003a50:	4639      	mov	r1, r7
 8003a52:	4630      	mov	r0, r6
 8003a54:	47c0      	blx	r8
 8003a56:	3001      	adds	r0, #1
 8003a58:	d103      	bne.n	8003a62 <_printf_common+0xba>
 8003a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a62:	3501      	adds	r5, #1
 8003a64:	e7c3      	b.n	80039ee <_printf_common+0x46>
 8003a66:	18e1      	adds	r1, r4, r3
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	2030      	movs	r0, #48	; 0x30
 8003a6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a70:	4422      	add	r2, r4
 8003a72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a7a:	3302      	adds	r3, #2
 8003a7c:	e7c5      	b.n	8003a0a <_printf_common+0x62>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	4622      	mov	r2, r4
 8003a82:	4639      	mov	r1, r7
 8003a84:	4630      	mov	r0, r6
 8003a86:	47c0      	blx	r8
 8003a88:	3001      	adds	r0, #1
 8003a8a:	d0e6      	beq.n	8003a5a <_printf_common+0xb2>
 8003a8c:	f109 0901 	add.w	r9, r9, #1
 8003a90:	e7d8      	b.n	8003a44 <_printf_common+0x9c>
	...

08003a94 <_printf_i>:
 8003a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	7e09      	ldrb	r1, [r1, #24]
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	296e      	cmp	r1, #110	; 0x6e
 8003aa4:	4617      	mov	r7, r2
 8003aa6:	4606      	mov	r6, r0
 8003aa8:	4698      	mov	r8, r3
 8003aaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003aac:	f000 80b3 	beq.w	8003c16 <_printf_i+0x182>
 8003ab0:	d822      	bhi.n	8003af8 <_printf_i+0x64>
 8003ab2:	2963      	cmp	r1, #99	; 0x63
 8003ab4:	d036      	beq.n	8003b24 <_printf_i+0x90>
 8003ab6:	d80a      	bhi.n	8003ace <_printf_i+0x3a>
 8003ab8:	2900      	cmp	r1, #0
 8003aba:	f000 80b9 	beq.w	8003c30 <_printf_i+0x19c>
 8003abe:	2958      	cmp	r1, #88	; 0x58
 8003ac0:	f000 8083 	beq.w	8003bca <_printf_i+0x136>
 8003ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ac8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003acc:	e032      	b.n	8003b34 <_printf_i+0xa0>
 8003ace:	2964      	cmp	r1, #100	; 0x64
 8003ad0:	d001      	beq.n	8003ad6 <_printf_i+0x42>
 8003ad2:	2969      	cmp	r1, #105	; 0x69
 8003ad4:	d1f6      	bne.n	8003ac4 <_printf_i+0x30>
 8003ad6:	6820      	ldr	r0, [r4, #0]
 8003ad8:	6813      	ldr	r3, [r2, #0]
 8003ada:	0605      	lsls	r5, r0, #24
 8003adc:	f103 0104 	add.w	r1, r3, #4
 8003ae0:	d52a      	bpl.n	8003b38 <_printf_i+0xa4>
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6011      	str	r1, [r2, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	da03      	bge.n	8003af2 <_printf_i+0x5e>
 8003aea:	222d      	movs	r2, #45	; 0x2d
 8003aec:	425b      	negs	r3, r3
 8003aee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003af2:	486f      	ldr	r0, [pc, #444]	; (8003cb0 <_printf_i+0x21c>)
 8003af4:	220a      	movs	r2, #10
 8003af6:	e039      	b.n	8003b6c <_printf_i+0xd8>
 8003af8:	2973      	cmp	r1, #115	; 0x73
 8003afa:	f000 809d 	beq.w	8003c38 <_printf_i+0x1a4>
 8003afe:	d808      	bhi.n	8003b12 <_printf_i+0x7e>
 8003b00:	296f      	cmp	r1, #111	; 0x6f
 8003b02:	d020      	beq.n	8003b46 <_printf_i+0xb2>
 8003b04:	2970      	cmp	r1, #112	; 0x70
 8003b06:	d1dd      	bne.n	8003ac4 <_printf_i+0x30>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	f043 0320 	orr.w	r3, r3, #32
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	e003      	b.n	8003b1a <_printf_i+0x86>
 8003b12:	2975      	cmp	r1, #117	; 0x75
 8003b14:	d017      	beq.n	8003b46 <_printf_i+0xb2>
 8003b16:	2978      	cmp	r1, #120	; 0x78
 8003b18:	d1d4      	bne.n	8003ac4 <_printf_i+0x30>
 8003b1a:	2378      	movs	r3, #120	; 0x78
 8003b1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b20:	4864      	ldr	r0, [pc, #400]	; (8003cb4 <_printf_i+0x220>)
 8003b22:	e055      	b.n	8003bd0 <_printf_i+0x13c>
 8003b24:	6813      	ldr	r3, [r2, #0]
 8003b26:	1d19      	adds	r1, r3, #4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6011      	str	r1, [r2, #0]
 8003b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b34:	2301      	movs	r3, #1
 8003b36:	e08c      	b.n	8003c52 <_printf_i+0x1be>
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6011      	str	r1, [r2, #0]
 8003b3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b40:	bf18      	it	ne
 8003b42:	b21b      	sxthne	r3, r3
 8003b44:	e7cf      	b.n	8003ae6 <_printf_i+0x52>
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	6825      	ldr	r5, [r4, #0]
 8003b4a:	1d18      	adds	r0, r3, #4
 8003b4c:	6010      	str	r0, [r2, #0]
 8003b4e:	0628      	lsls	r0, r5, #24
 8003b50:	d501      	bpl.n	8003b56 <_printf_i+0xc2>
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	e002      	b.n	8003b5c <_printf_i+0xc8>
 8003b56:	0668      	lsls	r0, r5, #25
 8003b58:	d5fb      	bpl.n	8003b52 <_printf_i+0xbe>
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	4854      	ldr	r0, [pc, #336]	; (8003cb0 <_printf_i+0x21c>)
 8003b5e:	296f      	cmp	r1, #111	; 0x6f
 8003b60:	bf14      	ite	ne
 8003b62:	220a      	movne	r2, #10
 8003b64:	2208      	moveq	r2, #8
 8003b66:	2100      	movs	r1, #0
 8003b68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b6c:	6865      	ldr	r5, [r4, #4]
 8003b6e:	60a5      	str	r5, [r4, #8]
 8003b70:	2d00      	cmp	r5, #0
 8003b72:	f2c0 8095 	blt.w	8003ca0 <_printf_i+0x20c>
 8003b76:	6821      	ldr	r1, [r4, #0]
 8003b78:	f021 0104 	bic.w	r1, r1, #4
 8003b7c:	6021      	str	r1, [r4, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d13d      	bne.n	8003bfe <_printf_i+0x16a>
 8003b82:	2d00      	cmp	r5, #0
 8003b84:	f040 808e 	bne.w	8003ca4 <_printf_i+0x210>
 8003b88:	4665      	mov	r5, ip
 8003b8a:	2a08      	cmp	r2, #8
 8003b8c:	d10b      	bne.n	8003ba6 <_printf_i+0x112>
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	07db      	lsls	r3, r3, #31
 8003b92:	d508      	bpl.n	8003ba6 <_printf_i+0x112>
 8003b94:	6923      	ldr	r3, [r4, #16]
 8003b96:	6862      	ldr	r2, [r4, #4]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	bfde      	ittt	le
 8003b9c:	2330      	movle	r3, #48	; 0x30
 8003b9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ba2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ba6:	ebac 0305 	sub.w	r3, ip, r5
 8003baa:	6123      	str	r3, [r4, #16]
 8003bac:	f8cd 8000 	str.w	r8, [sp]
 8003bb0:	463b      	mov	r3, r7
 8003bb2:	aa03      	add	r2, sp, #12
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f7ff fef6 	bl	80039a8 <_printf_common>
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d14d      	bne.n	8003c5c <_printf_i+0x1c8>
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	b005      	add	sp, #20
 8003bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bca:	4839      	ldr	r0, [pc, #228]	; (8003cb0 <_printf_i+0x21c>)
 8003bcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003bd0:	6813      	ldr	r3, [r2, #0]
 8003bd2:	6821      	ldr	r1, [r4, #0]
 8003bd4:	1d1d      	adds	r5, r3, #4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6015      	str	r5, [r2, #0]
 8003bda:	060a      	lsls	r2, r1, #24
 8003bdc:	d50b      	bpl.n	8003bf6 <_printf_i+0x162>
 8003bde:	07ca      	lsls	r2, r1, #31
 8003be0:	bf44      	itt	mi
 8003be2:	f041 0120 	orrmi.w	r1, r1, #32
 8003be6:	6021      	strmi	r1, [r4, #0]
 8003be8:	b91b      	cbnz	r3, 8003bf2 <_printf_i+0x15e>
 8003bea:	6822      	ldr	r2, [r4, #0]
 8003bec:	f022 0220 	bic.w	r2, r2, #32
 8003bf0:	6022      	str	r2, [r4, #0]
 8003bf2:	2210      	movs	r2, #16
 8003bf4:	e7b7      	b.n	8003b66 <_printf_i+0xd2>
 8003bf6:	064d      	lsls	r5, r1, #25
 8003bf8:	bf48      	it	mi
 8003bfa:	b29b      	uxthmi	r3, r3
 8003bfc:	e7ef      	b.n	8003bde <_printf_i+0x14a>
 8003bfe:	4665      	mov	r5, ip
 8003c00:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c04:	fb02 3311 	mls	r3, r2, r1, r3
 8003c08:	5cc3      	ldrb	r3, [r0, r3]
 8003c0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003c0e:	460b      	mov	r3, r1
 8003c10:	2900      	cmp	r1, #0
 8003c12:	d1f5      	bne.n	8003c00 <_printf_i+0x16c>
 8003c14:	e7b9      	b.n	8003b8a <_printf_i+0xf6>
 8003c16:	6813      	ldr	r3, [r2, #0]
 8003c18:	6825      	ldr	r5, [r4, #0]
 8003c1a:	6961      	ldr	r1, [r4, #20]
 8003c1c:	1d18      	adds	r0, r3, #4
 8003c1e:	6010      	str	r0, [r2, #0]
 8003c20:	0628      	lsls	r0, r5, #24
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	d501      	bpl.n	8003c2a <_printf_i+0x196>
 8003c26:	6019      	str	r1, [r3, #0]
 8003c28:	e002      	b.n	8003c30 <_printf_i+0x19c>
 8003c2a:	066a      	lsls	r2, r5, #25
 8003c2c:	d5fb      	bpl.n	8003c26 <_printf_i+0x192>
 8003c2e:	8019      	strh	r1, [r3, #0]
 8003c30:	2300      	movs	r3, #0
 8003c32:	6123      	str	r3, [r4, #16]
 8003c34:	4665      	mov	r5, ip
 8003c36:	e7b9      	b.n	8003bac <_printf_i+0x118>
 8003c38:	6813      	ldr	r3, [r2, #0]
 8003c3a:	1d19      	adds	r1, r3, #4
 8003c3c:	6011      	str	r1, [r2, #0]
 8003c3e:	681d      	ldr	r5, [r3, #0]
 8003c40:	6862      	ldr	r2, [r4, #4]
 8003c42:	2100      	movs	r1, #0
 8003c44:	4628      	mov	r0, r5
 8003c46:	f7fc fadb 	bl	8000200 <memchr>
 8003c4a:	b108      	cbz	r0, 8003c50 <_printf_i+0x1bc>
 8003c4c:	1b40      	subs	r0, r0, r5
 8003c4e:	6060      	str	r0, [r4, #4]
 8003c50:	6863      	ldr	r3, [r4, #4]
 8003c52:	6123      	str	r3, [r4, #16]
 8003c54:	2300      	movs	r3, #0
 8003c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c5a:	e7a7      	b.n	8003bac <_printf_i+0x118>
 8003c5c:	6923      	ldr	r3, [r4, #16]
 8003c5e:	462a      	mov	r2, r5
 8003c60:	4639      	mov	r1, r7
 8003c62:	4630      	mov	r0, r6
 8003c64:	47c0      	blx	r8
 8003c66:	3001      	adds	r0, #1
 8003c68:	d0aa      	beq.n	8003bc0 <_printf_i+0x12c>
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	079b      	lsls	r3, r3, #30
 8003c6e:	d413      	bmi.n	8003c98 <_printf_i+0x204>
 8003c70:	68e0      	ldr	r0, [r4, #12]
 8003c72:	9b03      	ldr	r3, [sp, #12]
 8003c74:	4298      	cmp	r0, r3
 8003c76:	bfb8      	it	lt
 8003c78:	4618      	movlt	r0, r3
 8003c7a:	e7a3      	b.n	8003bc4 <_printf_i+0x130>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	464a      	mov	r2, r9
 8003c80:	4639      	mov	r1, r7
 8003c82:	4630      	mov	r0, r6
 8003c84:	47c0      	blx	r8
 8003c86:	3001      	adds	r0, #1
 8003c88:	d09a      	beq.n	8003bc0 <_printf_i+0x12c>
 8003c8a:	3501      	adds	r5, #1
 8003c8c:	68e3      	ldr	r3, [r4, #12]
 8003c8e:	9a03      	ldr	r2, [sp, #12]
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	42ab      	cmp	r3, r5
 8003c94:	dcf2      	bgt.n	8003c7c <_printf_i+0x1e8>
 8003c96:	e7eb      	b.n	8003c70 <_printf_i+0x1dc>
 8003c98:	2500      	movs	r5, #0
 8003c9a:	f104 0919 	add.w	r9, r4, #25
 8003c9e:	e7f5      	b.n	8003c8c <_printf_i+0x1f8>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1ac      	bne.n	8003bfe <_printf_i+0x16a>
 8003ca4:	7803      	ldrb	r3, [r0, #0]
 8003ca6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003caa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cae:	e76c      	b.n	8003b8a <_printf_i+0xf6>
 8003cb0:	08003fe1 	.word	0x08003fe1
 8003cb4:	08003ff2 	.word	0x08003ff2

08003cb8 <memcpy>:
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	1e43      	subs	r3, r0, #1
 8003cbc:	440a      	add	r2, r1
 8003cbe:	4291      	cmp	r1, r2
 8003cc0:	d100      	bne.n	8003cc4 <memcpy+0xc>
 8003cc2:	bd10      	pop	{r4, pc}
 8003cc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ccc:	e7f7      	b.n	8003cbe <memcpy+0x6>

08003cce <memmove>:
 8003cce:	4288      	cmp	r0, r1
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	eb01 0302 	add.w	r3, r1, r2
 8003cd6:	d807      	bhi.n	8003ce8 <memmove+0x1a>
 8003cd8:	1e42      	subs	r2, r0, #1
 8003cda:	4299      	cmp	r1, r3
 8003cdc:	d00a      	beq.n	8003cf4 <memmove+0x26>
 8003cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ce2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ce6:	e7f8      	b.n	8003cda <memmove+0xc>
 8003ce8:	4283      	cmp	r3, r0
 8003cea:	d9f5      	bls.n	8003cd8 <memmove+0xa>
 8003cec:	1881      	adds	r1, r0, r2
 8003cee:	1ad2      	subs	r2, r2, r3
 8003cf0:	42d3      	cmn	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <memmove+0x28>
 8003cf4:	bd10      	pop	{r4, pc}
 8003cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cfa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003cfe:	e7f7      	b.n	8003cf0 <memmove+0x22>

08003d00 <_free_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4605      	mov	r5, r0
 8003d04:	2900      	cmp	r1, #0
 8003d06:	d045      	beq.n	8003d94 <_free_r+0x94>
 8003d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d0c:	1f0c      	subs	r4, r1, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfb8      	it	lt
 8003d12:	18e4      	addlt	r4, r4, r3
 8003d14:	f000 f8d2 	bl	8003ebc <__malloc_lock>
 8003d18:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <_free_r+0x98>)
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	b933      	cbnz	r3, 8003d2e <_free_r+0x2e>
 8003d20:	6063      	str	r3, [r4, #4]
 8003d22:	6014      	str	r4, [r2, #0]
 8003d24:	4628      	mov	r0, r5
 8003d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d2a:	f000 b8c8 	b.w	8003ebe <__malloc_unlock>
 8003d2e:	42a3      	cmp	r3, r4
 8003d30:	d90c      	bls.n	8003d4c <_free_r+0x4c>
 8003d32:	6821      	ldr	r1, [r4, #0]
 8003d34:	1862      	adds	r2, r4, r1
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bf04      	itt	eq
 8003d3a:	681a      	ldreq	r2, [r3, #0]
 8003d3c:	685b      	ldreq	r3, [r3, #4]
 8003d3e:	6063      	str	r3, [r4, #4]
 8003d40:	bf04      	itt	eq
 8003d42:	1852      	addeq	r2, r2, r1
 8003d44:	6022      	streq	r2, [r4, #0]
 8003d46:	6004      	str	r4, [r0, #0]
 8003d48:	e7ec      	b.n	8003d24 <_free_r+0x24>
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	b10a      	cbz	r2, 8003d54 <_free_r+0x54>
 8003d50:	42a2      	cmp	r2, r4
 8003d52:	d9fa      	bls.n	8003d4a <_free_r+0x4a>
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	1858      	adds	r0, r3, r1
 8003d58:	42a0      	cmp	r0, r4
 8003d5a:	d10b      	bne.n	8003d74 <_free_r+0x74>
 8003d5c:	6820      	ldr	r0, [r4, #0]
 8003d5e:	4401      	add	r1, r0
 8003d60:	1858      	adds	r0, r3, r1
 8003d62:	4282      	cmp	r2, r0
 8003d64:	6019      	str	r1, [r3, #0]
 8003d66:	d1dd      	bne.n	8003d24 <_free_r+0x24>
 8003d68:	6810      	ldr	r0, [r2, #0]
 8003d6a:	6852      	ldr	r2, [r2, #4]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	4401      	add	r1, r0
 8003d70:	6019      	str	r1, [r3, #0]
 8003d72:	e7d7      	b.n	8003d24 <_free_r+0x24>
 8003d74:	d902      	bls.n	8003d7c <_free_r+0x7c>
 8003d76:	230c      	movs	r3, #12
 8003d78:	602b      	str	r3, [r5, #0]
 8003d7a:	e7d3      	b.n	8003d24 <_free_r+0x24>
 8003d7c:	6820      	ldr	r0, [r4, #0]
 8003d7e:	1821      	adds	r1, r4, r0
 8003d80:	428a      	cmp	r2, r1
 8003d82:	bf04      	itt	eq
 8003d84:	6811      	ldreq	r1, [r2, #0]
 8003d86:	6852      	ldreq	r2, [r2, #4]
 8003d88:	6062      	str	r2, [r4, #4]
 8003d8a:	bf04      	itt	eq
 8003d8c:	1809      	addeq	r1, r1, r0
 8003d8e:	6021      	streq	r1, [r4, #0]
 8003d90:	605c      	str	r4, [r3, #4]
 8003d92:	e7c7      	b.n	8003d24 <_free_r+0x24>
 8003d94:	bd38      	pop	{r3, r4, r5, pc}
 8003d96:	bf00      	nop
 8003d98:	20000098 	.word	0x20000098

08003d9c <_malloc_r>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	1ccd      	adds	r5, r1, #3
 8003da0:	f025 0503 	bic.w	r5, r5, #3
 8003da4:	3508      	adds	r5, #8
 8003da6:	2d0c      	cmp	r5, #12
 8003da8:	bf38      	it	cc
 8003daa:	250c      	movcc	r5, #12
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	4606      	mov	r6, r0
 8003db0:	db01      	blt.n	8003db6 <_malloc_r+0x1a>
 8003db2:	42a9      	cmp	r1, r5
 8003db4:	d903      	bls.n	8003dbe <_malloc_r+0x22>
 8003db6:	230c      	movs	r3, #12
 8003db8:	6033      	str	r3, [r6, #0]
 8003dba:	2000      	movs	r0, #0
 8003dbc:	bd70      	pop	{r4, r5, r6, pc}
 8003dbe:	f000 f87d 	bl	8003ebc <__malloc_lock>
 8003dc2:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <_malloc_r+0xac>)
 8003dc4:	6814      	ldr	r4, [r2, #0]
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	b991      	cbnz	r1, 8003df0 <_malloc_r+0x54>
 8003dca:	4c20      	ldr	r4, [pc, #128]	; (8003e4c <_malloc_r+0xb0>)
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	b91b      	cbnz	r3, 8003dd8 <_malloc_r+0x3c>
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	f000 f863 	bl	8003e9c <_sbrk_r>
 8003dd6:	6020      	str	r0, [r4, #0]
 8003dd8:	4629      	mov	r1, r5
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f000 f85e 	bl	8003e9c <_sbrk_r>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d124      	bne.n	8003e2e <_malloc_r+0x92>
 8003de4:	230c      	movs	r3, #12
 8003de6:	6033      	str	r3, [r6, #0]
 8003de8:	4630      	mov	r0, r6
 8003dea:	f000 f868 	bl	8003ebe <__malloc_unlock>
 8003dee:	e7e4      	b.n	8003dba <_malloc_r+0x1e>
 8003df0:	680b      	ldr	r3, [r1, #0]
 8003df2:	1b5b      	subs	r3, r3, r5
 8003df4:	d418      	bmi.n	8003e28 <_malloc_r+0x8c>
 8003df6:	2b0b      	cmp	r3, #11
 8003df8:	d90f      	bls.n	8003e1a <_malloc_r+0x7e>
 8003dfa:	600b      	str	r3, [r1, #0]
 8003dfc:	50cd      	str	r5, [r1, r3]
 8003dfe:	18cc      	adds	r4, r1, r3
 8003e00:	4630      	mov	r0, r6
 8003e02:	f000 f85c 	bl	8003ebe <__malloc_unlock>
 8003e06:	f104 000b 	add.w	r0, r4, #11
 8003e0a:	1d23      	adds	r3, r4, #4
 8003e0c:	f020 0007 	bic.w	r0, r0, #7
 8003e10:	1ac3      	subs	r3, r0, r3
 8003e12:	d0d3      	beq.n	8003dbc <_malloc_r+0x20>
 8003e14:	425a      	negs	r2, r3
 8003e16:	50e2      	str	r2, [r4, r3]
 8003e18:	e7d0      	b.n	8003dbc <_malloc_r+0x20>
 8003e1a:	428c      	cmp	r4, r1
 8003e1c:	684b      	ldr	r3, [r1, #4]
 8003e1e:	bf16      	itet	ne
 8003e20:	6063      	strne	r3, [r4, #4]
 8003e22:	6013      	streq	r3, [r2, #0]
 8003e24:	460c      	movne	r4, r1
 8003e26:	e7eb      	b.n	8003e00 <_malloc_r+0x64>
 8003e28:	460c      	mov	r4, r1
 8003e2a:	6849      	ldr	r1, [r1, #4]
 8003e2c:	e7cc      	b.n	8003dc8 <_malloc_r+0x2c>
 8003e2e:	1cc4      	adds	r4, r0, #3
 8003e30:	f024 0403 	bic.w	r4, r4, #3
 8003e34:	42a0      	cmp	r0, r4
 8003e36:	d005      	beq.n	8003e44 <_malloc_r+0xa8>
 8003e38:	1a21      	subs	r1, r4, r0
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	f000 f82e 	bl	8003e9c <_sbrk_r>
 8003e40:	3001      	adds	r0, #1
 8003e42:	d0cf      	beq.n	8003de4 <_malloc_r+0x48>
 8003e44:	6025      	str	r5, [r4, #0]
 8003e46:	e7db      	b.n	8003e00 <_malloc_r+0x64>
 8003e48:	20000098 	.word	0x20000098
 8003e4c:	2000009c 	.word	0x2000009c

08003e50 <_realloc_r>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	4607      	mov	r7, r0
 8003e54:	4614      	mov	r4, r2
 8003e56:	460e      	mov	r6, r1
 8003e58:	b921      	cbnz	r1, 8003e64 <_realloc_r+0x14>
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e60:	f7ff bf9c 	b.w	8003d9c <_malloc_r>
 8003e64:	b922      	cbnz	r2, 8003e70 <_realloc_r+0x20>
 8003e66:	f7ff ff4b 	bl	8003d00 <_free_r>
 8003e6a:	4625      	mov	r5, r4
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e70:	f000 f826 	bl	8003ec0 <_malloc_usable_size_r>
 8003e74:	42a0      	cmp	r0, r4
 8003e76:	d20f      	bcs.n	8003e98 <_realloc_r+0x48>
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	f7ff ff8e 	bl	8003d9c <_malloc_r>
 8003e80:	4605      	mov	r5, r0
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d0f2      	beq.n	8003e6c <_realloc_r+0x1c>
 8003e86:	4631      	mov	r1, r6
 8003e88:	4622      	mov	r2, r4
 8003e8a:	f7ff ff15 	bl	8003cb8 <memcpy>
 8003e8e:	4631      	mov	r1, r6
 8003e90:	4638      	mov	r0, r7
 8003e92:	f7ff ff35 	bl	8003d00 <_free_r>
 8003e96:	e7e9      	b.n	8003e6c <_realloc_r+0x1c>
 8003e98:	4635      	mov	r5, r6
 8003e9a:	e7e7      	b.n	8003e6c <_realloc_r+0x1c>

08003e9c <_sbrk_r>:
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	4c06      	ldr	r4, [pc, #24]	; (8003eb8 <_sbrk_r+0x1c>)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	4608      	mov	r0, r1
 8003ea6:	6023      	str	r3, [r4, #0]
 8003ea8:	f7fc fefe 	bl	8000ca8 <_sbrk>
 8003eac:	1c43      	adds	r3, r0, #1
 8003eae:	d102      	bne.n	8003eb6 <_sbrk_r+0x1a>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	b103      	cbz	r3, 8003eb6 <_sbrk_r+0x1a>
 8003eb4:	602b      	str	r3, [r5, #0]
 8003eb6:	bd38      	pop	{r3, r4, r5, pc}
 8003eb8:	20000930 	.word	0x20000930

08003ebc <__malloc_lock>:
 8003ebc:	4770      	bx	lr

08003ebe <__malloc_unlock>:
 8003ebe:	4770      	bx	lr

08003ec0 <_malloc_usable_size_r>:
 8003ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec4:	1f18      	subs	r0, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bfbc      	itt	lt
 8003eca:	580b      	ldrlt	r3, [r1, r0]
 8003ecc:	18c0      	addlt	r0, r0, r3
 8003ece:	4770      	bx	lr

08003ed0 <_init>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	bf00      	nop
 8003ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed6:	bc08      	pop	{r3}
 8003ed8:	469e      	mov	lr, r3
 8003eda:	4770      	bx	lr

08003edc <_fini>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	bf00      	nop
 8003ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee2:	bc08      	pop	{r3}
 8003ee4:	469e      	mov	lr, r3
 8003ee6:	4770      	bx	lr
